---
import { sort } from "$/stores/sort";
import type { SortOption } from "$/stores/sort";

export interface Props {
  options?: Array<{
    label: string;
    value: SortOption;
  }>;
  defaultValue?: SortOption;
}

const { 
  options = [
    { label: "Best selling", value: "best_selling" },
    { label: "Alphabetically, A-Z", value: "alpha_asc" },
    { label: "Alphabetically, Z-A", value: "alpha_desc" },
    { label: "Price, low to high", value: "price_asc" },
    { label: "Price, high to low", value: "price_desc" },
    { label: "Date, old to new", value: "date_asc" },
    { label: "Date, new to old", value: "date_desc" }
  ],
  defaultValue = "best_selling"
} = Astro.props;

// Generate unique ID for this component instance
const dropdownId = `sorter-${Math.random().toString(36).substr(2, 9)}`;

// Get the current sort value from the store
const currentSort = sort.get();
const currentOption = options.find(opt => opt.value === currentSort) || options[0];
---

<div class="relative inline-block w-full lg:w-72 self-end" data-dropdown={dropdownId}>
  <!-- Main dropdown button -->
<button 
  type="button" 
  class="sorter-button w-full px-3 lg:px-4 py-2 lg:py-3 text-left border border-zinc-300 focus:outline-none focus:ring-2 focus:ring-zinc-500 focus:border-zinc-500 flex items-center justify-between text-xs lg:text-sm rounded-lg"
  aria-haspopup="true"
  aria-expanded="false"
>
  <span class="current-selection text-gray-900 truncate pr-2">{currentOption.label}</span>
  <svg class="sorter-chevron w-3 h-3 lg:w-4 lg:h-4 text-gray-400 transition-transform duration-200 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
  </svg>
</button>

  <!-- Dropdown menu -->
  <div class="sorter-dropdown absolute z-10 w-full mt-1 bg-white border border-gray-300 shadow-lg right-0 hidden">
    <!-- Sort label -->
    <div class="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-50 border-b border-gray-200">
      Sort
    </div>
    
    <!-- Options list -->
    <ul class="max-h-60 overflow-auto">
      {options.map((option) => (
        <li>
          <button
            type="button"
            class={`sorter-option w-full px-4 py-2 text-left text-sm hover:bg-gray-50 ${
              option.value === currentSort 
                ? 'bg-zinc-600 text-white' 
                : 'text-gray-900'
            }`}
            data-value={option.value}
          >
            {option.label}
          </button>
        </li>
      ))}
    </ul>
  </div>
</div>

<script>
  import { sort } from "$/stores/sort";
  import type { SortOption } from "$/stores/sort";

  // Handle dropdown functionality
  document.addEventListener('DOMContentLoaded', function() {
    const dropdowns = document.querySelectorAll('[data-dropdown]');
    
    dropdowns.forEach(dropdown => {
      const button = dropdown.querySelector('.sorter-button') as HTMLButtonElement;
      const menu = dropdown.querySelector('.sorter-dropdown') as HTMLDivElement;
      const chevron = dropdown.querySelector('.sorter-chevron') as SVGElement;
      const currentSelection = dropdown.querySelector('.current-selection') as HTMLSpanElement;
      const options = dropdown.querySelectorAll('.sorter-option') as NodeListOf<HTMLButtonElement>;
      
      let isOpen = false;
      
      // Toggle dropdown
      function toggleDropdown() {
        isOpen = !isOpen;
        menu?.classList.toggle('hidden', !isOpen);
        button?.setAttribute('aria-expanded', isOpen.toString());
        chevron?.style.setProperty('transform', isOpen ? 'rotate(180deg)' : 'rotate(0deg)');
      }
      
      // Close dropdown
      function closeDropdown() {
        if (isOpen) {
          isOpen = false;
          menu?.classList.add('hidden');
          button?.setAttribute('aria-expanded', 'false');
          chevron?.style.setProperty('transform', 'rotate(0deg)');
        }
      }
      
      // Update selection
      function updateSelection(newValue: SortOption) {
        // Update the sort store
        sort.set(newValue);
        
        // Update option styles
        options.forEach(option => {
          const value = option.getAttribute('data-value') as SortOption;
          if (value === newValue) {
            option.classList.remove('text-gray-900');
            option.classList.add('bg-zinc-600', 'text-white');
          } else {
            option.classList.remove('bg-zinc-600', 'text-white');
            option.classList.add('text-gray-900');
          }
        });
        
        // Update the current selection text
        const selectedOption = Array.from(options).find(opt => opt.getAttribute('data-value') === newValue);
        if (selectedOption && currentSelection) {
          currentSelection.textContent = selectedOption.textContent;
        }

        // Update URL
        updateURL(newValue);
      }

      // Update URL with sort parameter
      function updateURL(sortValue: SortOption) {
        const url = new URL(window.location.href);
        url.searchParams.set('sort', sortValue);
        window.history.replaceState({}, '', url);
      }
      
      // Load initial sort value from URL
      function loadSortFromURL() {
        const url = new URL(window.location.href);
        const sortValue = url.searchParams.get('sort') as SortOption | null;
        if (sortValue) {
          updateSelection(sortValue);
        }
      }
      
      // Event listeners
      button?.addEventListener('click', (e) => {
        e.stopPropagation();
        toggleDropdown();
      });
      
      options.forEach(option => {
        option.addEventListener('click', (e) => {
          e.stopPropagation();
          const value = option.getAttribute('data-value') as SortOption;
          if (value) {
            updateSelection(value);
            closeDropdown();
          }
        });
      });
      
      // Close on outside click
      document.addEventListener('click', (e) => {
        if (!dropdown.contains(e.target as Node)) {
          closeDropdown();
        }
      });
      
      // Close on escape key
      document.addEventListener('keydown', (e: KeyboardEvent) => {
        if (e.key === 'Escape' && isOpen) {
          closeDropdown();
          button?.focus();
        }
      });
      
      // Keyboard navigation
      button?.addEventListener('keydown', (e: KeyboardEvent) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          toggleDropdown();
        } else if (e.key === 'ArrowDown') {
          e.preventDefault();
          toggleDropdown();
          if (options.length > 0) {
            options[0].focus();
          }
        }
      });
      
      options.forEach((option, index) => {
        option.addEventListener('keydown', (e: KeyboardEvent) => {
          if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            const value = option.getAttribute('data-value') as SortOption;
            if (value) {
              updateSelection(value);
              closeDropdown();
              button?.focus();
            }
          } else if (e.key === 'ArrowDown') {
            e.preventDefault();
            const nextIndex = (index + 1) % options.length;
            options[nextIndex].focus();
          } else if (e.key === 'ArrowUp') {
            e.preventDefault();
            const prevIndex = index === 0 ? options.length - 1 : index - 1;
            options[prevIndex].focus();
          }
        });
      });

      // Load initial sort value from URL
      loadSortFromURL();
    });
  });
</script>
