---
import type { z } from "zod";
import type { MoneyV2Result, ProductResult } from "../utils/schemas";
import Money from "./Money.svelte";

export interface Props {
  price?: z.infer<typeof MoneyV2Result>;
  title: string;
  product: z.infer<typeof ProductResult>;
  selectedVariant?: z.infer<typeof ProductResult>["variants"]["nodes"][0];
}

const { price, title, product, selectedVariant } = Astro.props as Props;

// Get unique variants grouped by option type
const getVariantsByOption = (optionName: string) => {
  if (!product?.variants.nodes) return [];
  const variants = new Map();
  
  product.variants.nodes.forEach((variant) => {
    const option = variant.selectedOptions?.find(
      (opt) => opt.name.toLowerCase() === optionName.toLowerCase()
    );
    if (option) {
      variants.set(option.value, variant.id);
    }
  });
  
  return Array.from(variants.entries());
};

// Get selected option value
const getSelectedOption = (optionName: string) => {
  if (!selectedVariant?.selectedOptions) return null;
  const option = selectedVariant.selectedOptions.find(
    (opt) => opt.name.toLowerCase() === optionName.toLowerCase()
  );
  return option?.value || null;
};

const colorVariants = getVariantsByOption('color');
const sizeVariants = getVariantsByOption('size');
const selectedColor = getSelectedOption('color');
const selectedSize = getSelectedOption('size');

// Color mapping for swatches
const getColorClass = (colorName: string) => {
  const colorMap: { [key: string]: string } = {
    green: "bg-green-500",
    yellow: "bg-yellow-400",
    red: "bg-red-500",
    blue: "bg-blue-500",
    black: "bg-black",
    white: "bg-white border-gray-300",
    gray: "bg-gray-400",
    grey: "bg-gray-400",
    beige: "bg-beige",
    brown: "bg-amber-800",
    orange: "bg-orange-500",
    pink: "bg-pink-500",
    purple: "bg-purple-500",
  };
  return colorMap[colorName.toLowerCase()] || "bg-gray-300";
};

// Check if variant is low in stock
const isLowStock = (quantity: number) => quantity <= 5 && quantity > 0;
---

<h1 class="font-primary mx-4 lg:mx-0 text-center lg:text-start text-4xl font-bold uppercase sm:text-4xl">
  {title}
</h1>
<p class="font-primary mt-4 text-center lg:text-start text-2xl font-bold text-zinc-700">
  <Money price={price} />
</p>

<!-- Size Selection -->
{sizeVariants.length > 0 && (
  <div class="mt-6">
    <h3 class="text-md text-center lg:text-start font-light text-zinc-800 uppercase">
      Size
    </h3>
    <div class="mx-10 lg:mx-0 mt-2 grid grid-cols-4 gap-2">
      {sizeVariants.map(([size, variantId]) => (
        <button
          type="button"
          class={`px-3 py-2 text-sm font-medium transition-all cursor-pointer hover:bg-gray-100 ${
            selectedSize === size
              ? "border-2 border-black"
              : "text-gray-900 border border-gray-300"
          }`}
          data-variant-id={variantId}
          data-size={size}
        >
          {size}
        </button>
      ))}
    </div>
  </div>
)}

<!-- Color Selection -->
{colorVariants.length > 0 && (
  <div class="mt-6">
    <h3 class="text-md text-center lg:text-start font-light text-zinc-800 uppercase">
      Color {selectedColor && `â€” ${selectedColor}`}
    </h3>
    <div class="mt-2 flex justify-center lg:justify-start gap-2">
      {colorVariants.map(([color, variantId]) => (
        <button
          type="button"
          class={`h-8 w-8 rounded-full transition-all cursor-pointer ${getColorClass(color)} ${
            selectedColor === color
              ? "ring-2 ring-black ring-offset-4"
              : "hover:ring-2 hover:ring-gray-300"
          }`}
          title={color}
          data-variant-id={variantId}
          data-color={color}
        />
      ))}
    </div>
  </div>
)}

<!-- Stock Information -->
{selectedVariant && (
  <div class="mt-6">
    {selectedVariant.availableForSale ? (
      <div class="flex items-center gap-2">
        <span class="w-full text-center lg:text-start text-sm text-gray-900">
          {isLowStock(selectedVariant.quantityAvailable) ? (
            <span class="flex justify-center lg:justify-start lg:mx-2 items-center gap-2 font-medium">
              <span class="relative inline-flex size-3">
                <span class="absolute inline-flex h-full w-full animate-ping rounded-full bg-amber-400 opacity-75" />
                <span class="relative inline-flex size-3 rounded-full bg-amber-400" />
              </span>
              Low stock - {selectedVariant.quantityAvailable} left
            </span>
          ) : (
            <span class="font-medium text-emerald-600">In stock</span>
          )}
        </span>
      </div>
    ) : (
      <span class="text-sm font-medium text-red-600">Out of stock</span>
    )}
  </div>
)}

<script>
  // Add event listeners for variant selection
  document.addEventListener('DOMContentLoaded', function() {
    // Handle variant selection (both size and color)
    const variantButtons = document.querySelectorAll('[data-variant-id]');
    variantButtons.forEach(button => {
      button.addEventListener('click', function() {
        const variantId = this.getAttribute('data-variant-id');
        if (variantId) {
          const url = new URL(window.location.href);
          url.searchParams.set('variant', variantId);
          window.location.href = url.toString();
        }
      });
    });
  });
</script>