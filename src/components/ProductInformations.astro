---
import type { z } from "zod";
import { VariantResult, type MoneyV2Result, type ProductResult } from "../utils/schemas";
import Money from "./Money.svelte";

export interface Props {
  price?: z.infer<typeof MoneyV2Result>;
  title: string;
  product: z.infer<typeof ProductResult>;
  selectedVariant?: z.infer<typeof ProductResult>["variants"]["nodes"][0];
}

const { price, title, product, selectedVariant } = Astro.props as Props;

// Helper to check if variant is available
const isVariantAvailable = (variant: z.infer<typeof VariantResult>) => {
  return variant.availableForSale && variant.quantityAvailable > 0;
};

// Get only available variants upfront for better performance
const availableVariants = product?.variants.nodes.filter(isVariantAvailable) || [];

// Create efficient availability map
const createAvailabilityMap = () => {
  const optionAvailability: Record<string, Record<string, Set<string>>> = {};
  
  availableVariants.forEach(variant => {
    variant.selectedOptions.forEach((option) => {
      const optionName = option.name.toLowerCase();
      const optionValue = option.value;
      
      if (!optionAvailability[optionName]) {
        optionAvailability[optionName] = {};
      }
      
      if (!optionAvailability[optionName][optionValue]) {
        optionAvailability[optionName][optionValue] = new Set();
      }
      
      // Store what other option combinations work with this option value
      variant.selectedOptions.forEach(otherOption => {
        if (otherOption.name !== option.name) {
          optionAvailability[optionName][optionValue].add(
            `${otherOption.name.toLowerCase()}:${otherOption.value}`
          );
        }
      });
    });
  });
  
  return optionAvailability;
};

const availabilityMap = createAvailabilityMap();

// Get current selections from selected variant
const getCurrentSelections = () => {
  if (!selectedVariant?.selectedOptions) return {};
  
  const selections: Record<string, string> = {};
  selectedVariant.selectedOptions.forEach(option => {
    selections[option.name.toLowerCase()] = option.value;
  });
  return selections;
};

const currentSelections = getCurrentSelections();

// Find variant by exact option match
const findVariantBySelections = (selections: Record<string, string>) => {
  return availableVariants.find(variant => {
    return variant.selectedOptions.every(option => {
      const key = option.name.toLowerCase();
      return selections[key] === option.value;
    });
  });
};

// NEW: Find best fallback variant when exact match isn't available
const findBestFallbackVariant = (targetOptionName: string, targetOptionValue: string) => {
  const targetKey = targetOptionName.toLowerCase();
  
  // Get all available variants that have the target option value
  const variantsWithTargetOption = availableVariants.filter(variant =>
    variant.selectedOptions.some(option => 
      option.name.toLowerCase() === targetKey && option.value === targetOptionValue
    )
  );
  
  if (variantsWithTargetOption.length === 0) return null;
  
  // Define priority order for fallback (customize as needed)
  const sizePriority = ['XS', 'S', 'M', 'L', 'XL', 'XXL'];
  const getOptionValue = (variant: any, optionName: string) => {
    const option = variant.selectedOptions.find((opt: any) => opt.name.toLowerCase() === optionName.toLowerCase());
    return option?.value || '';
  };
  
  // Sort variants by preference (you can customize this logic)
  const sortedVariants = variantsWithTargetOption.sort((a, b) => {
    // If we're selecting a size, prefer sizes close to current selection
    if (targetKey === 'size') {
      const currentSize = currentSelections.size;
      if (currentSize) {
        const currentIndex = sizePriority.indexOf(currentSize);
        const aSize = getOptionValue(a, 'size');
        const bSize = getOptionValue(b, 'size');
        const aIndex = sizePriority.indexOf(aSize);
        const bIndex = sizePriority.indexOf(bSize);
        
        const aDiff = Math.abs(aIndex - currentIndex);
        const bDiff = Math.abs(bIndex - currentIndex);
        
        if (aDiff !== bDiff) return aDiff - bDiff;
      }
    }
    
    // If we're selecting a color, try to keep the same size
    if (targetKey === 'color') {
      const currentSize = currentSelections.size;
      if (currentSize) {
        const aHasCurrentSize = getOptionValue(a, 'size') === currentSize;
        const bHasCurrentSize = getOptionValue(b, 'size') === currentSize;
        
        if (aHasCurrentSize && !bHasCurrentSize) return -1;
        if (!aHasCurrentSize && bHasCurrentSize) return 1;
      }
    }
    
    // Fallback: prefer higher stock quantities
    return b.quantityAvailable - a.quantityAvailable;
  });
  
  return sortedVariants[0] || null;
};

// Get variant for new selection with fallback logic
const getVariantForSelection = (optionName: string, optionValue: string) => {
  const newSelections = {
    ...currentSelections,
    [optionName.toLowerCase()]: optionValue
  };
  
  // First try exact match
  const exactMatch = findVariantBySelections(newSelections);
  if (exactMatch) return exactMatch;
  
  // If no exact match, find best fallback
  return findBestFallbackVariant(optionName, optionValue);
};

// Get organized options using product.options (cleaner approach)
const getProductOptions = () => {
  if (!product?.options) return [];
  
  return product.options.map(option => ({
    name: option.name,
    values: option.values.map(value => {
      const exactVariant = getVariantForSelection(option.name, value);
      const isExactMatch = exactVariant && Object.entries({
        ...currentSelections,
        [option.name.toLowerCase()]: value
      }).every(([key, val]) => {
        return exactVariant.selectedOptions.some(opt => 
          opt.name.toLowerCase() === key && opt.value === val
        );
      });
      
      return {
        value,
        available: !!exactVariant, // Any variant (exact or fallback) makes it available
        isExactMatch,
        variant: exactVariant
      };
    })
  }));
};

const productOptions = getProductOptions();

// Get specific option types
const colorOption = productOptions.find(opt => opt.name.toLowerCase() === 'color');
const sizeOption = productOptions.find(opt => opt.name.toLowerCase() === 'size');

// Current selections for display
const selectedColor = currentSelections.color;
const selectedSize = currentSelections.size;

// Color mapping for swatches
const getColorClass = (colorName: string) => {
  const colorMap: { [key: string]: string } = {
    green: "bg-green-500",
    yellow: "bg-yellow-400",
    red: "bg-red-500",
    blue: "bg-blue-500",
    black: "bg-black",
    white: "bg-white border-gray-300",
    gray: "bg-gray-400",
    grey: "bg-gray-400",
    beige: "bg-amber-100",
    brown: "bg-amber-800",
    orange: "bg-orange-500",
    pink: "bg-pink-500",
    purple: "bg-purple-500",
  };
  return colorMap[colorName.toLowerCase()] || "bg-gray-300";
};

// Check if variant is low in stock
const isLowStock = (quantity: number) => quantity <= 5 && quantity > 0;

// Debug logging
if (import.meta.env.DEV) {
  console.log('Product options:', productOptions);
  console.log('Current selections:', currentSelections);
  console.log('Available variants count:', availableVariants.length);
  console.log('Availability map:', availabilityMap);
}
---

<h1 class="font-primary mx-4 lg:mx-0 text-center lg:text-start text-4xl font-bold uppercase sm:text-4xl">
  {title}
</h1>
<p class="font-primary mt-4 text-center lg:text-start text-2xl font-bold text-zinc-700">
  <Money price={price} />
</p>

<!-- Size Selection -->
{sizeOption && (
  <div class="mt-6">
    <h3 class="text-md text-center lg:text-start font-light text-zinc-800 uppercase">
      Size
    </h3>
    <div class="mx-10 lg:mx-0 mt-2 grid grid-cols-4 gap-2">
      {sizeOption.values.map(({ value: size, available, isExactMatch, variant }) => {
        const isSelected = selectedSize === size;
        
        return (
          <button
            type="button"
            class={`px-3 py-2 text-sm font-medium transition-all cursor-pointer hover:bg-zinc-200 ${
              isSelected
                ? "border-2 border-black"
                : "text-gray-900 border"
            }`}
            data-variant-id={variant?.id || ''}
            data-size={size}
            data-is-fallback={available && !isExactMatch ? "true" : "false"}
            title={
              !available 
                ? `Size ${size} available in different color` 
                : !isExactMatch 
                  ? `Size ${size} available in different color` 
                  : `Select size ${size}`
            }
          >
            {size}
          </button>
        );
      })}
    </div>
  </div>
)}

<!-- Color Selection -->
{colorOption && (
  <div class="mt-6">
    <h3 class="text-md text-center lg:text-start font-light text-zinc-800 uppercase">
      Color {selectedColor && `â€” ${selectedColor}`}
    </h3>
    <div class="mt-2 flex justify-center lg:justify-start gap-2">
      {colorOption.values.map(({ value: color, available, isExactMatch, variant }) => {
        const isSelected = selectedColor === color;
        
        return (
          <button
            type="button"
            class={`h-8 w-8 rounded-full transition-all cursor-pointer relative ${getColorClass(color)} ${
              isSelected
                ? "ring-2 ring-black ring-offset-4"
                : "hover:ring-2 hover:ring-gray-300"
            }`}
            title={
              !available 
                ? `${color} available in different size` 
                : !isExactMatch 
                  ? `${color} available in different size` 
                  : color
            }
            data-variant-id={variant?.id || ''}
            data-color={color}
            data-is-fallback={available && !isExactMatch ? "true" : "false"}
          >
            {/* Strikethrough for unavailable exact matches */}
            {!isExactMatch && (
              <div class="absolute inset-0 flex items-center justify-center">
                <div class="w-full h-0.5 bg-zinc-500 rotate-45 transform"></div>
              </div>
            )}
          </button>
        );
      })}
    </div>
  </div>
)}

<!-- Stock Information -->
{selectedVariant && (
  <div class="mt-6">
    {selectedVariant.availableForSale ? (
      <div class="flex items-center gap-2">
        <span class="w-full text-center lg:text-start text-sm text-gray-900">
          {isLowStock(selectedVariant.quantityAvailable) ? (
            <span class="flex justify-center lg:justify-start lg:mx-2 items-center gap-2 font-medium">
              <span class="relative inline-flex size-3">
                <span class="absolute inline-flex h-full w-full animate-ping rounded-full bg-amber-400 opacity-75" />
                <span class="relative inline-flex size-3 rounded-full bg-amber-400" />
              </span>
              Low stock - {selectedVariant.quantityAvailable} left
            </span>
          ) : (
            <span class="font-medium text-emerald-600">In stock</span>
          )}
        </span>
      </div>
    ) : (
      <span class="text-sm font-medium text-red-600">Out of stock</span>
    )}
  </div>
)}

<script>
  // Add event listeners for variant selection
  document.addEventListener('DOMContentLoaded', function() {
    const variantButtons = document.querySelectorAll('[data-variant-id]');
    
    variantButtons.forEach(button => {
      button.addEventListener('click', function(e) {
        e.preventDefault();
        
        const variantId = this.getAttribute('data-variant-id');
        
        // Only proceed if we have a valid variant ID
        if (variantId) {
          const url = new URL(window.location.href);
          url.searchParams.set('variant', variantId);
          
          // For better UX, you could update the UI without page reload here
          // For now, we'll do a page reload to get the updated selectedVariant
          window.location.href = url.toString();
        }
      });
    });
  });
</script>