---
import Logo from "./Logo.astro";
import LogoWhite from "$/components/LogoWhite.astro";
import CartIcon from "$/components/CartIcon.svelte";
import SearchIcon from "$/svgs/SearchIcon.astro";
import Hamburger from "$/svgs/Hamburger.astro";
import PredictiveSearch from "$/components/PredictiveSearch.svelte"

export interface Props {
  variant?: "absolute" | "relative";
  enableScrollAnimation?: boolean;
  id?: string;
}

const {
  variant = "absolute",
  enableScrollAnimation = true,
  id = "navigation",
} = Astro.props;

// Generate unique IDs for this instance
const mainHeaderId = `${id}-mainHeader`;
const scrolledHeaderId = `${id}-scrolledHeader`;
const openSidebarId = `${id}-openSidebar`;
const openSidebarScrolledId = `${id}-openSidebarScrolled`;
const searchTriggerId = `${id}-search-trigger`;
const searchTriggerScrolledId = `${id}-search-trigger-scrolled`;

// Determine classes based on variant
const getMainHeaderClasses = () => {
  const baseClasses =
    "top-0 z-50 w-full transition-all duration-300 section-padding-x";

  if (variant === "absolute") {
    return `absolute ${baseClasses}`;
  } else {
    return `relative ${baseClasses} bg-mainbg`;
  }
};

const getScrolledHeaderClasses = () => {
  const baseClasses =
    "hidden fixed top-0 z-40 w-full transition-all duration-300 section-padding-x bg-mainbg border-b";
  const hiddenClass = enableScrollAnimation ? "translate-y-[-100%]" : "";
  return `${baseClasses} ${hiddenClass}`;
};

// Determine which logo and icon colors to use
const useWhiteIcons = variant === "absolute";
---

<!-- Main Header -->
<div id={mainHeaderId} class={getMainHeaderClasses()}>
  <nav class="grid w-full grid-cols-3 items-center px-4 sm:px-8 lg:px-16 py-4 sm:py-6" role="navigation">
    <!-- Hamburger (visible on all screens) -->
    <div class="flex justify-start">
      <button
        id={openSidebarId}
        class="cursor-pointer p-2 rounded-md"
        aria-label="Open menu"
      >
        <Hamburger color={useWhiteIcons ? "white" : undefined} />
      </button>
    </div>

    <!-- Logo (responsive size) -->
    <div class="flex justify-center">
      <a href="/" class="flex items-center max-h-8 sm:max-h-10 lg:max-h-12">
        {useWhiteIcons ? <LogoWhite /> : <Logo />}
      </a>
    </div>

    <!-- Icons (cart, search) -->
    <div class="flex justify-end gap-2 sm:gap-4">
      <button id={searchTriggerId} class="cursor-pointer p-2 rounded-md" aria-label="Search">
        <SearchIcon color={useWhiteIcons ? "white" : undefined} />
      </button>
      <div class="flex items-center">
      <CartIcon color={useWhiteIcons ? "white" : "black"} client:load />
      </div>
    </div>
  </nav>
</div>

<!-- Scrolled Header (only render if scroll animation is enabled) -->
{
  enableScrollAnimation && (
    <div id={scrolledHeaderId} class={getScrolledHeaderClasses()}>
      <nav class="grid w-full grid-cols-3 items-center px-4 sm:px-8 lg:px-16 py-4 sm:py-6" role="navigation">
        <div class="flex justify-start">
          <button
            id={openSidebarScrolledId}
            class="cursor-pointer p-2 rounded-md"
            aria-label="Open menu"
          >
            <Hamburger />
          </button>
        </div>
        <div class="flex justify-center">
          <a href="/" class="cursor-pointer flex items-center max-h-8 sm:max-h-10 lg:max-h-12">
            <Logo />
          </a>
        </div>
        <div class="flex justify-end gap-2 sm:gap-4">
          <button id={searchTriggerScrolledId} class="cursor-pointer p-2 rounded-md" aria-label="Search">
            <SearchIcon />
          </button>
          <div class="flex items-center">
          <CartIcon color="black" client:load />
          </div>
        </div>
      </nav>
    </div>
  )
}

<script define:vars={{ scrolledHeaderId, enableScrollAnimation, searchTriggerId, searchTriggerScrolledId }}>
  if (enableScrollAnimation) {
    const scrolledHeader = document.getElementById(scrolledHeaderId);

    const handleScroll = () => {
      if (window.scrollY > 20) {
        scrolledHeader?.classList.remove("hidden");
      } else {
        scrolledHeader.classList.add("hidden");
      }
      if (window.scrollY > 200) {
        scrolledHeader?.classList.remove("translate-y-[-100%]");
      } else {
        scrolledHeader?.classList.add("translate-y-[-100%]");
      }
    };

    window.addEventListener("scroll", handleScroll);

    // Cleanup function for when component is removed
    window.addEventListener("beforeunload", () => {
      window.removeEventListener("scroll", handleScroll);
    });
  }

   document.addEventListener('DOMContentLoaded', () => {
    // Handle both search buttons
    const searchButtons = [
      document.getElementById(searchTriggerId),
      document.getElementById(searchTriggerScrolledId)
    ].filter(Boolean); // Remove null elements
    
    searchButtons.forEach(button => {
      button.addEventListener('click', () => {
        document.dispatchEvent(new CustomEvent('open-search'));
      });
    });
  });
</script>