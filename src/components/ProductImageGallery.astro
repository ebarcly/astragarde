---
import { z } from "zod";
import { ImageResult } from "../utils/schemas";
import ShopifyImage from "./ShopifyImage.svelte";
const ImagesResult = z.object({
  nodes: z.array(ImageResult),
});
export interface Props {
  images: z.infer<typeof ImagesResult>;
}
const { images } = Astro.props as Props;
---
<div class="grid gap-4 lg:grid-cols-8 lg:gap-6">
  <!-- Mobile Image Slider -->
  <div class="block lg:hidden overflow-x-auto whitespace-nowrap space-x-2">
    {images.nodes.map((image, index) => (
      <div class="inline-block w-[80vw] overflow-hidden cursor-pointer transform transition-all duration-300 hover:scale-[1.02] hover:shadow-lg" data-lightbox-trigger data-image-index={index}>
        <ShopifyImage
          classList="object-cover h-full transition-all duration-300"
          loading="eager"
          image={image}
          sizes="90vw"
        />
      </div>
    ))}
  </div>
  <!-- Thumbnails on Desktop (Left Column) -->
  <div class="hidden lg:flex lg:flex-col lg:gap-6 lg:col-span-2">
    {images.nodes.map((image, index) => {
      if (index < 3) {
        return (
          <div class="overflow-hidden aspect-square cursor-pointer transform transition-all duration-300 hover:scale-[1.02] hover:shadow-lg rounded-sm" data-lightbox-trigger data-image-index={index}>
            <ShopifyImage
              classList="object-cover w-full h-full hover:scale-105 transition-transform duration-300 ease-out"
              loading="eager"
              image={image}
              sizes={`
                  (min-width: 1540px) 190px,
                  (min-width: 1280px) 156px,
                  (min-width: 1024px) 120px,
                  304px
                `}
            />
          </div>
        );
      }
    })}
  </div>
  <!-- Main Image on Desktop (Right Column) -->
  <div class="hidden lg:block lg:col-span-6">
    <div class="overflow-hidden cursor-pointer transform transition-all duration-300 hover:scale-[1.01] hover:shadow-xl rounded-sm" data-lightbox-trigger data-image-index="0">
      <ShopifyImage
        classList="object-cover w-full h-full hover:scale-105 transition-transform duration-300 ease-out"
        loading="eager"
        image={images.nodes[0]}
        sizes={`
            (min-width: 1540px) 570px,
            (min-width: 1280px) 468px,
            (min-width: 1024px) 360px,
            calc(75vw - 24px)
          `}
      />
    </div>
  </div>
</div>
<!-- Lightbox Modal -->
<div id="lightbox-modal" class="fixed inset-0 backdrop-blur-sm bg-black/80 z-50 hidden items-center justify-center opacity-0 transition-opacity duration-300 ease-out">
  <!-- Toolbar -->
  <div id="lightbox-toolbar" class="absolute top-4 left-1/2 transform -translate-x-1/2 flex items-center gap-2 bg-black/60 backdrop-blur-sm rounded-full px-4 py-2 z-60 transition-all duration-200">
    <!-- Zoom Out Button -->
    <button id="zoom-out-btn" class="text-white hover:text-gray-300 p-2 rounded-full hover:bg-white/10 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed" title="Zoom Out">
      <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <circle cx="11" cy="11" r="8"></circle>
        <path d="M21 21l-4.35-4.35"></path>
        <line x1="8" y1="11" x2="14" y2="11"></line>
      </svg>
    </button>
    
    <!-- Zoom Level Display -->
    <span id="zoom-level" class="text-white text-sm font-mono min-w-12 text-center">100%</span>
    
    <!-- Zoom In Button -->
    <button id="zoom-in-btn" class="text-white hover:text-gray-300 p-2 rounded-full hover:bg-white/10 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed" title="Zoom In">
      <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <circle cx="11" cy="11" r="8"></circle>
        <path d="M21 21l-4.35-4.35"></path>
        <line x1="11" y1="8" x2="11" y2="14"></line>
        <line x1="8" y1="11" x2="14" y2="11"></line>
      </svg>
    </button>
    
    <!-- Reset Zoom Button -->
    <button id="reset-zoom-btn" class="text-white hover:text-gray-300 p-2 rounded-full hover:bg-white/10 transition-all duration-200" title="Reset Zoom">
      <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <path d="M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8"></path>
        <path d="M3 3v5h5"></path>
      </svg>
    </button>
  </div>
  <!-- Close Button -->
  <button id="lightbox-close" class="absolute top-4 right-4 text-white text-3xl hover:text-gray-300 z-60 transform transition-all duration-200 hover:scale-110 hover:rotate-90">
    Ã—
  </button>
  
  <!-- Navigation Buttons - Enhanced for desktop -->
  <button id="lightbox-prev" class="absolute left-2 md:left-20 xl:left-96 top-1/2 transform -translate-y-1/2 text-white z-60 transition-all duration-200 bg-black/40 hover:bg-black/60 backdrop-blur-sm rounded-full p-2 md:p-3 hover:scale-110 hover:-translate-x-1 border border-white/20">
    <svg width="28" height="28" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" class="md:w-8 md:h-8">
      <polyline points="15,18 9,12 15,6"></polyline>
    </svg>
  </button>
  <button id="lightbox-next" class="absolute right-2 md:right-20 xl:right-96 top-1/2 transform -translate-y-1/2 text-white z-60 transition-all duration-200 bg-black/40 hover:bg-black/60 backdrop-blur-sm rounded-full p-2 md:p-3 hover:scale-110 hover:translate-x-1 border border-white/20">
    <svg width="28" height="28" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" class="md:w-8 md:h-8">
      <polyline points="9,18 15,12 9,6"></polyline>
    </svg>
  </button>
  
  <!-- Image Container -->
  <div id="lightbox-container" class="relative aspect-[3/4] max-w-[90vw] max-h-[90vh] overflow-hidden cursor-grab transform transition-all duration-300 select-none">
    <img id="lightbox-image" class="w-full h-full object-contain transition-transform duration-300 ease-out pointer-events-none" alt="" draggable="false" />
  </div>
  
  <!-- Image Counter -->
  <div class="absolute bottom-4 left-1/2 transform -translate-x-1/2 text-white text-sm bg-black/60 px-3 py-1 rounded-full backdrop-blur-sm transition-all duration-200">
    <span id="current-image">1</span> / <span id="total-images">{images.nodes.length}</span>
  </div>
  
</div>
<style>
  .cursor-grabbing {
    cursor: grabbing !important;
  }
  
  .cursor-zoom-in {
    cursor: zoom-in !important;
  }
  
  .cursor-zoom-out {
    cursor: zoom-out !important;
  }
  
  /* Smooth fade-in animation for images */
  @keyframes fadeInScale {
    from {
      opacity: 0;
      transform: scale(0.95);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }
  
  .lightbox-enter {
    animation: fadeInScale 0.3s ease-out;
  }
  
  /* Subtle pulse animation for loading states */
  @keyframes subtlePulse {
    0%, 100% {
      opacity: 1;
    }
    50% {
      opacity: 0.8;
    }
  }
  
  .loading-pulse {
    animation: subtlePulse 1.5s ease-in-out infinite;
  }
  /* Hide scrollbars during pan */
  #lightbox-container {
    scrollbar-width: none;
    -ms-overflow-style: none;
  }
  
  #lightbox-container::-webkit-scrollbar {
    display: none;
  }
  /* Swipe navigation indicator */
  .swipe-indicator {
    position: absolute;
    bottom: 60px;
    left: 50%;
    transform: translateX(-50%);
    color: white;
    font-size: 12px;
    background: rgba(0, 0, 0, 0.6);
    padding: 4px 8px;
    border-radius: 12px;
    backdrop-filter: blur(4px);
    opacity: 0;
    transition: opacity 0.3s ease;
    pointer-events: none;
  }
  
  .swipe-indicator.show {
    opacity: 1;
  }
  
  /* Fullscreen mode styles */
  .fullscreen-mode {
    position: fixed !important;
    top: 0 !important;
    left: 0 !important;
    width: 100vw !important;
    height: 100vh !important;
    max-width: none !important;
    max-height: none !important;
    z-index: 9999 !important;
    background: black !important;
  }
  
  .fullscreen-mode #lightbox-toolbar,
  .fullscreen-mode #lightbox-close,
  .fullscreen-mode .absolute:not(#lightbox-container):not(#lightbox-image) {
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.3s ease;
  }
  
  .fullscreen-mode.show-controls #lightbox-toolbar,
  .fullscreen-mode.show-controls #lightbox-close,
  .fullscreen-mode.show-controls .absolute:not(#lightbox-container):not(#lightbox-image) {
    opacity: 1;
    pointer-events: auto;
  }
  
  .fullscreen-mode #lightbox-container {
    width: 100vw !important;
    height: 100vh !important;
    max-width: none !important;
    max-height: none !important;
  }
  
  /* Enhanced navigation arrows */
  #lightbox-prev, #lightbox-next {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
  }
  
</style>
<script define:vars={{ images: images.nodes }}>
  class ImageLightbox {
    constructor(images) {
      this.images = images;
      this.currentIndex = 0;
      this.scale = 1;
      this.minScale = 0.5;
      this.maxScale = 5;
      this.scaleStep = 0.5;
      this.panX = 0;
      this.panY = 0;
      this.isDragging = false;
      this.dragStartX = 0;
      this.dragStartY = 0;
      this.dragStartPanX = 0;
      this.dragStartPanY = 0;
      
      // Touch/gesture handling
      this.lastTouchDistance = 0;
      this.initialTouchDistance = 0;
      this.initialScale = 1;
      this.touches = [];
      
      // Swipe navigation
      this.swipeStartX = 0;
      this.swipeStartY = 0;
      this.swipeEndX = 0;
      this.swipeEndY = 0;
      this.minSwipeDistance = 50;
      this.maxVerticalSwipe = 100;
      this.isSwipingHorizontally = false;
      this.swipeStartTime = 0;
      this.maxSwipeTime = 300; // Maximum time for a swipe gesture
      
      // Fullscreen mode
      this.isFullscreen = false;
      this.fullscreenThreshold = 1.5; // Scale threshold to trigger fullscreen
      this.fullscreenControlsTimeout = null;
      this.isMobile = window.innerWidth < 768;
      
      // Elements
      this.modal = document.getElementById('lightbox-modal');
      this.image = document.getElementById('lightbox-image');
      this.container = document.getElementById('lightbox-container');
      this.currentImageSpan = document.getElementById('current-image');
      this.totalImagesSpan = document.getElementById('total-images');
      this.zoomInBtn = document.getElementById('zoom-in-btn');
      this.zoomOutBtn = document.getElementById('zoom-out-btn');
      this.resetZoomBtn = document.getElementById('reset-zoom-btn');
      this.zoomLevelSpan = document.getElementById('zoom-level');
      
      this.init();
    }
    
    init() {
      // Add click listeners to all image triggers
      document.querySelectorAll('[data-lightbox-trigger]').forEach(trigger => {
        trigger.addEventListener('click', (e) => {
          const index = parseInt(e.currentTarget.getAttribute('data-image-index'));
          this.openLightbox(index);
        });
      });
      
      // Modal controls
      document.getElementById('lightbox-close').addEventListener('click', () => this.closeLightbox());
      document.getElementById('lightbox-prev').addEventListener('click', () => this.previousImage());
      document.getElementById('lightbox-next').addEventListener('click', () => this.nextImage());
      
      // Zoom controls
      this.zoomInBtn.addEventListener('click', () => this.zoomIn());
      this.zoomOutBtn.addEventListener('click', () => this.zoomOut());
      this.resetZoomBtn.addEventListener('click', () => this.resetZoom());
      
      // Image interaction
      this.image.addEventListener('click', (e) => this.handleImageClick(e));
      this.image.addEventListener('dblclick', (e) => this.handleDoubleClick(e));
      
      // Mouse drag events
      this.container.addEventListener('mousedown', (e) => this.handleMouseDown(e));
      document.addEventListener('mousemove', (e) => this.handleMouseMove(e));
      document.addEventListener('mouseup', () => this.handleMouseUp());
      
      // Touch events for mobile
      this.container.addEventListener('touchstart', (e) => this.handleTouchStart(e), { passive: false });
      this.container.addEventListener('touchmove', (e) => this.handleTouchMove(e), { passive: false });
      this.container.addEventListener('touchend', (e) => this.handleTouchEnd(e), { passive: false });
      
      // Wheel zoom
      this.container.addEventListener('wheel', (e) => this.handleWheel(e), { passive: false });
      
      // Close on background click
      this.modal.addEventListener('click', (e) => {
        if (e.target === this.modal) {
          if (this.isFullscreen) {
            this.exitFullscreen();
          } else {
            this.closeLightbox();
          }
        }
      });
      
      // Keyboard navigation
      document.addEventListener('keydown', (e) => {
        if (!this.modal.classList.contains('hidden')) {
          switch(e.key) {
            case 'Escape':
              if (this.isFullscreen) {
                this.exitFullscreen();
              } else {
                this.closeLightbox();
              }
              break;
            case 'ArrowLeft':
              this.previousImage();
              break;
            case 'ArrowRight':
              this.nextImage();
              break;
            case '+':
            case '=':
              this.zoomIn();
              break;
            case '-':
              this.zoomOut();
              break;
            case '0':
              this.resetZoom();
              break;
            case 'f':
            case 'F':
              this.toggleFullscreen();
              break;
          }
        }
      });
      
      // Update mobile status on resize
      window.addEventListener('resize', () => {
        this.isMobile = window.innerWidth < 768;
      });
      
      // Update total images counter
      this.totalImagesSpan.textContent = this.images.length;
    }
    
    openLightbox(index) {
      this.currentIndex = index;
      this.resetTransform();
      this.updateImage();
      this.modal.classList.remove('hidden');
      this.modal.classList.add('flex');
      
      // Smooth fade-in animation
      requestAnimationFrame(() => {
        this.modal.classList.remove('opacity-0');
        this.modal.classList.add('opacity-100');
      });
      
      document.body.style.overflow = 'hidden';
    }
    
    closeLightbox() {
      this.exitFullscreen();
      
      // Smooth fade-out animation
      this.modal.classList.remove('opacity-100');
      this.modal.classList.add('opacity-0');
      
      setTimeout(() => {
        this.modal.classList.add('hidden');
        this.modal.classList.remove('flex');
      }, 300);
      
      document.body.style.overflow = '';
      this.resetTransform();
    }
    
    updateImage() {
      const currentImage = this.images[this.currentIndex];
      const imageUrl = currentImage.url || currentImage.src || currentImage.image?.url;
      const altText = currentImage.alt || currentImage.altText || '';
      
      // Add loading animation
      this.image.classList.add('loading-pulse');
      
      // Create new image to preload
      const newImg = new Image();
      newImg.onload = () => {
        this.image.src = imageUrl;
        this.image.alt = altText;
        this.image.classList.remove('loading-pulse');
        this.image.classList.add('lightbox-enter');
        
        // Remove animation class after animation completes
        setTimeout(() => {
          this.image.classList.remove('lightbox-enter');
        }, 300);
      };
      newImg.src = imageUrl;
      
      this.currentImageSpan.textContent = this.currentIndex + 1;
      this.resetTransform();
    }
    
    nextImage() {
      this.currentIndex = (this.currentIndex + 1) % this.images.length;
      this.updateImage();
    }
    
    previousImage() {
      this.currentIndex = (this.currentIndex - 1 + this.images.length) % this.images.length;
      this.updateImage();
    }
    
    // Zoom functions
    zoomIn() {
      this.setScale(Math.min(this.scale + this.scaleStep, this.maxScale));
    }
    
    zoomOut() {
      this.setScale(Math.max(this.scale - this.scaleStep, this.minScale));
    }
    
    resetZoom() {
      this.resetTransform();
      if (this.isFullscreen) {
        this.exitFullscreen();
      }
    }
    
    setScale(newScale, centerX = null, centerY = null) {
      const oldScale = this.scale;
      this.scale = Math.min(Math.max(newScale, this.minScale), this.maxScale);
      
      // If zoom center is provided, adjust pan to zoom into that point
      if (centerX !== null && centerY !== null) {
        const rect = this.container.getBoundingClientRect();
        const relX = (centerX - rect.left) / rect.width - 0.5;
        const relY = (centerY - rect.top) / rect.height - 0.5;
        
        const scaleDiff = this.scale - oldScale;
        this.panX -= relX * scaleDiff * rect.width;
        this.panY -= relY * scaleDiff * rect.height;
      }
      
      this.constrainPan();
      this.updateTransform();
      this.updateZoomControls();
      this.updateCursor();
      
      // Check if we should enter fullscreen on mobile
      if (this.isMobile && !this.isFullscreen && this.scale >= this.fullscreenThreshold) {
        this.enterFullscreen();
      } else if (this.isFullscreen && this.scale < this.fullscreenThreshold) {
        this.exitFullscreen();
      }
    }
    
    resetTransform() {
      this.scale = 1;
      this.panX = 0;
      this.panY = 0;
      this.updateTransform();
      this.updateZoomControls();
      this.updateCursor();
    }
    
    updateTransform() {
      this.image.style.transform = `translate(${this.panX}px, ${this.panY}px) scale(${this.scale})`;
    }
    
    updateZoomControls() {
      this.zoomLevelSpan.textContent = Math.round(this.scale * 100) + '%';
      this.zoomInBtn.disabled = this.scale >= this.maxScale;
      this.zoomOutBtn.disabled = this.scale <= this.minScale;
    }
    
    updateCursor() {
      if (this.scale > 1) {
        this.container.classList.remove('cursor-grab', 'cursor-zoom-in');
        this.container.classList.add('cursor-grab');
      } else {
        this.container.classList.remove('cursor-grab', 'cursor-zoom-out');
        this.container.classList.add('cursor-zoom-in');
      }
    }
    
    constrainPan() {
      if (this.scale <= 1) {
        this.panX = 0;
        this.panY = 0;
        return;
      }
      
      const rect = this.container.getBoundingClientRect();
      const maxPanX = (rect.width * (this.scale - 1)) / 2;
      const maxPanY = (rect.height * (this.scale - 1)) / 2;
      
      this.panX = Math.min(Math.max(this.panX, -maxPanX), maxPanX);
      this.panY = Math.min(Math.max(this.panY, -maxPanY), maxPanY);
    }
    
    // Fullscreen mode functions
    enterFullscreen() {
      if (!this.isMobile || this.isFullscreen) return;
      
      this.isFullscreen = true;
      this.modal.classList.add('fullscreen-mode');
      
      // Auto-hide controls after 3 seconds
      this.scheduleControlsHide();
    }
    
    exitFullscreen() {
      if (!this.isFullscreen) return;
      
      this.isFullscreen = false;
      this.modal.classList.remove('fullscreen-mode', 'show-controls');
      this.clearControlsTimeout();
    }
    
    toggleFullscreen() {
      if (this.isFullscreen) {
        this.exitFullscreen();
      } else if (this.isMobile) {
        this.enterFullscreen();
      }
    }
    
    scheduleControlsHide() {
      this.clearControlsTimeout();
      this.modal.classList.add('show-controls');
      
      this.fullscreenControlsTimeout = setTimeout(() => {
        if (this.isFullscreen) {
          this.modal.classList.remove('show-controls');
        }
      }, 3000);
    }
    
    clearControlsTimeout() {
      if (this.fullscreenControlsTimeout) {
        clearTimeout(this.fullscreenControlsTimeout);
        this.fullscreenControlsTimeout = null;
      }
    }
    
    // Mouse event handlers
    handleImageClick(e) {
      if (!this.isDragging) {
        if (this.isFullscreen) {
          // In fullscreen, single tap shows/hides controls
          if (this.modal.classList.contains('show-controls')) {
            this.modal.classList.remove('show-controls');
            this.clearControlsTimeout();
          } else {
            this.scheduleControlsHide();
          }
        } else if (this.scale === 1) {
          this.setScale(2, e.clientX, e.clientY);
        } else {
          this.resetZoom();
        }
      }
    }
    
    handleDoubleClick(e) {
      e.preventDefault();
      if (this.scale < this.maxScale) {
        this.setScale(Math.min(this.scale * 2, this.maxScale), e.clientX, e.clientY);
      } else {
        this.resetZoom();
      }
    }
    
    handleMouseDown(e) {
      if (this.scale > 1) {
        this.isDragging = true;
        this.dragStartX = e.clientX;
        this.dragStartY = e.clientY;
        this.dragStartPanX = this.panX;
        this.dragStartPanY = this.panY;
        this.container.classList.add('cursor-grabbing');
        e.preventDefault();
      }
    }
    
    handleMouseMove(e) {
      if (this.isDragging && this.scale > 1) {
        this.panX = this.dragStartPanX + (e.clientX - this.dragStartX);
        this.panY = this.dragStartPanY + (e.clientY - this.dragStartY);
        this.constrainPan();
        this.updateTransform();
      }
    }
    
    handleMouseUp() {
      if (this.isDragging) {
        this.isDragging = false;
        this.container.classList.remove('cursor-grabbing');
      }
    }
    
    handleWheel(e) {
      e.preventDefault();
      const delta = e.deltaY > 0 ? -0.1 : 0.1;
      this.setScale(this.scale + delta, e.clientX, e.clientY);
    }
    
    // Touch event handlers with swipe navigation
    handleTouchStart(e) {
      e.preventDefault();
      this.touches = Array.from(e.touches);
      
      // Show controls on touch in fullscreen mode
      if (this.isFullscreen) {
        this.scheduleControlsHide();
      }
      
      if (this.touches.length === 1) {
        const touch = this.touches[0];
        this.swipeStartX = touch.clientX;
        this.swipeStartY = touch.clientY;
        this.swipeStartTime = Date.now();
        this.isSwipingHorizontally = null;
        
        // Single touch - start pan if zoomed
        if (this.scale > 1) {
          this.isDragging = true;
          this.dragStartX = touch.clientX;
          this.dragStartY = touch.clientY;
          this.dragStartPanX = this.panX;
          this.dragStartPanY = this.panY;
        }
      } else if (this.touches.length === 2) {
        // Two finger pinch - start zoom
        this.isDragging = false;
        this.isSwipingHorizontally = false; // Disable swipe during pinch
        this.initialTouchDistance = this.getTouchDistance();
        this.initialScale = this.scale;
      }
    }
    
    handleTouchMove(e) {
      e.preventDefault();
      this.touches = Array.from(e.touches);
      
      if (this.touches.length === 1) {
        const touch = this.touches[0];
        const deltaX = touch.clientX - this.swipeStartX;
        const deltaY = touch.clientY - this.swipeStartY;
        
        // Determine swipe direction on first significant movement
        if (this.isSwipingHorizontally === null && (Math.abs(deltaX) > 10 || Math.abs(deltaY) > 10)) {
          this.isSwipingHorizontally = Math.abs(deltaX) > Math.abs(deltaY);
        }
        
        if (this.scale > 1 && this.isDragging) {
          // Pan when zoomed in
          this.panX = this.dragStartPanX + deltaX;
          this.panY = this.dragStartPanY + deltaY;
          this.constrainPan();
          this.updateTransform();
        } else if (this.scale === 1 && this.isSwipingHorizontally) {
          // Allow horizontal swipe for navigation when not zoomed
          // Optional: Add visual feedback for swipe (you can uncomment below)
          // this.container.style.transform = `translateX(${deltaX * 0.3}px)`;
        }
        
      } else if (this.touches.length === 2) {
        // Pinch zoom
        const currentDistance = this.getTouchDistance();
        const scaleChange = currentDistance / this.initialTouchDistance;
        const newScale = this.initialScale * scaleChange;
        
        // Get center point between fingers
        const centerX = (this.touches[0].clientX + this.touches[1].clientX) / 2;
        const centerY = (this.touches[0].clientY + this.touches[1].clientY) / 2;
        
        this.setScale(newScale, centerX, centerY);
      }
    }
    
    handleTouchEnd(e) {
      e.preventDefault();
      this.touches = Array.from(e.touches);
      
      if (this.touches.length === 0) {
        // Check for swipe navigation
        if (this.scale === 1 && this.isSwipingHorizontally) {
          const touch = e.changedTouches[0];
          this.swipeEndX = touch.clientX;
          this.swipeEndY = touch.clientY;
          const swipeTime = Date.now() - this.swipeStartTime;
          
          this.handleSwipeNavigation(swipeTime);
        }
        
        // Reset container transform if we added visual feedback
        this.container.style.transform = '';
        
        this.isDragging = false;
        this.initialTouchDistance = 0;
        this.isSwipingHorizontally = null;
        
      } else if (this.touches.length === 1) {
        // Switched from pinch to pan
        this.initialTouchDistance = 0;
        this.isSwipingHorizontally = null;
        
        if (this.scale > 1) {
          this.isDragging = true;
          this.dragStartX = this.touches[0].clientX;
          this.dragStartY = this.touches[0].clientY;
          this.dragStartPanX = this.panX;
          this.dragStartPanY = this.panY;
        }
      }
    }
    
    handleSwipeNavigation(swipeTime) {
      const deltaX = this.swipeEndX - this.swipeStartX;
      const deltaY = Math.abs(this.swipeEndY - this.swipeStartY);
      const distance = Math.abs(deltaX);
      
      // Check if it's a valid swipe:
      // - Horizontal distance is sufficient
      // - Vertical movement is limited
      // - Swipe was quick enough
      // - Only navigate if there are multiple images
      if (distance >= this.minSwipeDistance && 
          deltaY <= this.maxVerticalSwipe && 
          swipeTime <= this.maxSwipeTime &&
          this.images.length > 1) {
        
        if (deltaX > 0) {
          // Swipe right - go to previous image
          this.previousImage();
        } else {
          // Swipe left - go to next image
          this.nextImage();
        }
      }
    }
    
    getTouchDistance() {
      if (this.touches.length < 2) return 0;
      const dx = this.touches[0].clientX - this.touches[1].clientX;
      const dy = this.touches[0].clientY - this.touches[1].clientY;
      return Math.sqrt(dx * dx + dy * dy);
    }
  }
  
  // Initialize lightbox when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new ImageLightbox(images);
  });
</script>