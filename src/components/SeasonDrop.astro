---
import Products from './Products.svelte';

import mockupProducts from '$/utils/mockup.ts';

// Props interface for CMS integration
export interface Props {
  title?: string;
  subtitle?: string;
  linkText?: string;
  linkUrl?: string;
  buttonText?: string;
  buttonUrl?: string;
  endDate?: string; // ISO string format
  backgroundColor?: string;
  products?: any[];
}

// Default values (can be overridden by CMS)
const {
  title = "SUMMER DROP",
  subtitle = "Official Drop",
  linkText = "Official Drop",
  linkUrl = "#",
  buttonText = "SHOP COLLECTION",
  buttonUrl = "#",
  endDate = new Date("2025-05-27T00:00:00Z").toISOString(), // The date we'll finish this site
  products = [],
} = Astro.props;
---

<!-- Season Drop -->
<section class="section-padding-x! data-countdown-section py-20 sm:px-20">
  <div id="countdownSection" class="mx-auto">
    <div class="grid grid-cols-1 items-center gap-8 lg:grid-cols-3">
      <!-- Left Section - Title and Link -->
      <div class="px-10 lg:col-span-1">
        <h1 class="mb-4 text-5xl font-bold text-black">
          {title}
        </h1>
        <a
          href={linkUrl}
          class="inline-flex items-center font-medium text-black hover:underline"
        >
          {linkText}
          <svg
            class="ml-2 h-4 w-4"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M9 5l7 7-7 7"></path>
          </svg>
        </a>
      </div>

      <!-- Center Section - Countdown Timer -->
      <div class="lg:col-span-1">
        <div class="flex w-full justify-center text-center gap-4">
          <!-- Days -->
          <div class="flex flex-col items-center border-r border-black pr-4">
            <span
              id="countdown-days"
              class="text-4xl font-bold text-black lg:text-5xl tracking-wider">0</span
            >
            <span
              class="mt-1 text-xs font-medium tracking-wider text-gray-600 uppercase lg:text-sm"
              >DAYS</span
            >
          </div>

          <!-- Hours -->
          <div class="flex flex-col items-center border-r border-black pr-4">
            <span
              id="countdown-hours"
              class="text-4xl font-bold text-black lg:text-5xl tracking-wider">0</span
            >
            <span
              class="mt-1 text-xs font-medium tracking-wider text-gray-600 uppercase lg:text-sm"
              >HOURS</span
            >
          </div>

          <!-- Minutes -->
          <div class="flex flex-col items-center border-r border-black pr-4">
            <span
              id="countdown-minutes"
              class="text-4xl font-bold text-black lg:text-5xl tracking-wider">0</span
            >
            <span
              class="mt-1 text-xs font-medium tracking-wider text-gray-600 uppercase lg:text-sm"
              >MINUTES</span
            >
          </div>

          <!-- Seconds -->
          <div class="flex flex-col items-center">
            <span
              id="countdown-seconds"
              class="text-4xl font-bold text-black lg:text-5xl tracking-wider">0</span
            >
            <span
              class="mt-1 text-xs font-medium tracking-wider text-gray-600 uppercase lg:text-sm"
              >SECONDS</span
            >
          </div>
        </div>
      </div>

      <!-- Right Section - Shop Button -->
      <div class="flex justify-center lg:col-span-1 lg:justify-end">
        <a
          href={buttonUrl}
          class="inline-flex items-center justify-center bg-black text-white px-4 py-2 rounded-sm"
        >
          {buttonText}
        </a>
      </div>
    </div>
  </div>

  <!-- products -->
  <div id="seasonProducts" class="mt-16 mb-16">
    <Products products={products.slice(0, 8)} layout="horizontal" />
  </div>

  <!-- paragraph -->
  <div class="section-padding-x!">
    <p class="text-center lg:text-2xl text-zinc-800 font-primary font-medium tracking-wider mb-16">
      Trendy tracksuits and sunglasses designed for the fearless fashionista.
    </p>
  </div>

  <!-- Video hero -->
  <div class="relative h-[600px] bg-black md:rounded-lg text-center" data-video-hero>
    <video src="https://cdn.shopify.com/videos/c/o/v/ca1684baee104031893a6ca94b5e59d4.mp4" class="w-full h-full object-cover" autoplay muted loop playsinline webkit-playsinline></video>
    <div class="absolute inset-0 bg-black opacity-50"></div>
    <div class="flex justify-center flex-col h-full absolute bottom-0 left-0 right-0 p-4 z-10">
      <h2 class="text-white text-4xl font-bold font-primary uppercase tracking-wider text-center mb-4">
        Redefining the ordinary
      </h2>
      <p class="text-white text-sm font-primary font-medium tracking-wider text-center text-balance mb-4">
        We revolutionize urban style with our fearless approach to fashion, crafting tracksuits, clothes, and sunglasses that empower self-expression.
      </p>
    </div>
  </div>

  <!-- horizontal scrolling text -->
  <div class="scrolling-text" style="--move-speed: 20s;">
    <div class="scrolling-text__inner">
      <span>Fashion that ignites your confidence.&nbsp;&nbsp;&nbsp;</span>
      <span>Fashion that ignites your confidence.&nbsp;&nbsp;&nbsp;</span>
      <span>Fashion that ignites your confidence.&nbsp;&nbsp;&nbsp;</span>
      <span>Fashion that ignites your confidence.&nbsp;&nbsp;&nbsp;</span>
      <span>Fashion that ignites your confidence.&nbsp;&nbsp;&nbsp;</span>
      <span>Fashion that ignites your confidence.&nbsp;&nbsp;&nbsp;</span>
      <span>Fashion that ignites your confidence.&nbsp;&nbsp;&nbsp;</span>
      <span>Fashion that ignites your confidence.&nbsp;&nbsp;&nbsp;</span>
      <span>Fashion that ignites your confidence.&nbsp;&nbsp;&nbsp;</span>
      <span>Fashion that ignites your confidence.&nbsp;&nbsp;&nbsp;</span>
    </div>
  </div>

  <!-- products -->
  <div id="seasonProducts" class="mt-16 mb-16">
    <Products products={products.slice(0, 3)} layout="horizontal" cardSize='extraLarge' />
  </div>

  <!-- 2 column grid -->
  <div class="flex flex-col lg:flex-row">
    <div class="w-full lg:w-1/2"></div>
  </div>
</section>

<script define:vars={{ endDate }}>
  class CountdownTimer {
    constructor(targetDate) {
      this.targetDate = new Date(targetDate);
      this.elements = {
        days: document.getElementById("countdown-days"),
        hours: document.getElementById("countdown-hours"),
        minutes: document.getElementById("countdown-minutes"),
        seconds: document.getElementById("countdown-seconds"),
      };
      this.timer = null;
      this.init();
    }

    init() {
      // Update immediately
      this.updateDisplay();
      // Then update every second
      this.timer = setInterval(() => this.updateDisplay(), 1000);
    }

    updateDisplay() {
      const now = new Date().getTime();
      const distance = this.targetDate.getTime() - now;

      if (distance < 0) {
        this.handleCountdownEnd();
        return;
      }

      const timeUnits = this.calculateTimeUnits(distance);
      this.renderTimeUnits(timeUnits);
    }

    calculateTimeUnits(distance) {
      return {
        days: Math.floor(distance / (1000 * 60 * 60 * 24)),
        hours: Math.floor(
          (distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)
        ),
        minutes: Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60)),
        seconds: Math.floor((distance % (1000 * 60)) / 1000),
      };
    }

    renderTimeUnits(timeUnits) {
      Object.keys(timeUnits).forEach((unit) => {
        if (this.elements[unit]) {
          this.elements[unit].textContent = timeUnits[unit]
            .toString()
            .padStart(2, "0");
        }
      });
    }

    handleCountdownEnd() {
      if (this.timer) {
        clearInterval(this.timer);
      }

      // Display zeros
      Object.values(this.elements).forEach((element) => {
        if (element) element.textContent = "00";
      });

      // Dispatch custom event for countdown end
      document.dispatchEvent(
        new CustomEvent("countdownEnded", {
          detail: {
            section: document.querySelector("[data-countdown-section]"),
          },
        })
      );
    }

    destroy() {
      if (this.timer) {
        clearInterval(this.timer);
      }
    }
  }

  // Initialize countdown when DOM is ready
  document.addEventListener("DOMContentLoaded", () => {
    new CountdownTimer(endDate);
  });

  // Optional: Listen for countdown end event
   // You can add custom logic here, like hiding the section or showing a message
  // document.addEventListener("countdownEnded", (event) => {
  //   console.log("Countdown has ended!");
  // });
</script>

<style>
  /* Ensure consistent spacing for countdown numbers */
  #countdown-days,
  #countdown-hours,
  #countdown-minutes,
  #countdown-seconds {
    min-width: 2ch;
    display: inline-block;
  }

  /* Scrolling text styles */
  .scrolling-text {
    overflow: hidden;
    direction: ltr;
    width: 100%;
    background: transparent;
    margin: 2rem 0;
  }
  .scrolling-text__inner {
    visibility: visible;
    white-space: nowrap;
    display: inline-flex;
    margin: 0.15em 0;
    animation: scrolling-text var(--move-speed, 20s) linear infinite;
    animation-play-state: running;
  }
  .scrolling-text__inner--right {
    animation: scrolling-text-right var(--move-speed, 20s) linear infinite;
  }
  .scrolling-text span {
    white-space: nowrap;
    font-size: 1.5rem;
    font-weight: 600;
    color: #111;
    letter-spacing: 0.1em;
    font-family: inherit;
  }
  .scrolling-text:hover .scrolling-text__inner,
  .scrolling-text:focus .scrolling-text__inner {
    animation-play-state: paused;
  }
  @keyframes scrolling-text {
    0% {
      transform: translateX(0);
    }
    100% {
      transform: translateX(-50%);
    }
  }
  @keyframes scrolling-text-right {
    0% {
      transform: translateX(-50%);
    }
    100% {
      transform: translateX(0);
    }
  }
</style>
