---
import Products from './Products.svelte';
import Slider from './Slider.svelte';
// import mockupProducts from '$/utils/mockup.ts';

// Props interface for CMS integration
export interface Props {
  title?: string;
  subtitle?: string;
  linkText?: string;
  linkUrl?: string;
  buttonText?: string;
  buttonUrl?: string;
  endDate?: string;
  backgroundColor?: string;
  products?: any[];
}

// Default values
const {
  title = "Summer Drop",
  linkText = "Be the first to know",
  linkUrl = "#",
  buttonText = "SHOP COLLECTION",
  buttonUrl = "#",
  endDate = new Date("2025-05-27T00:00:00Z").toISOString(), // The date we'll finish this site
  products = [],
} = Astro.props;
---

<!-- Season Drop -->
<section class="section-padding-x! py-12 sm:py-16">
  <div class="max-w-7xl mx-auto">
    <div class="grid grid-cols-1 md:grid-cols-3 gap-8 items-center">
      <!-- Left: Title and Link -->
      <div class="flex flex-col items-center md:items-start text-center md:text-left gap-4">
        <h1 class="text-2xl sm:text-3xl md:text-4xl font-secondary font-bold text-black uppercase">
          {title}
        </h1>
        <a
          href={linkUrl}
          class="inline-flex items-center font-secondary font-light text-black hover:underline text-base sm:text-lg"
        >
          {linkText}
          <svg class="ml-2 h-4 w-4 md:h-6 md:w-6 font-tertiary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
          </svg>
        </a>
      </div>

      <!-- Center: Countdown -->
      <div class="flex justify-center">
        <div class="flex gap-4 sm:gap-6">
          {['days', 'hours', 'minutes', 'seconds'].map((unit, idx) => (
            <div class={`flex flex-col items-center ${idx < 3 ? 'border-r border-black pr-4 sm:pr-6' : ''}`}>
              <span id={`countdown-${unit}`} class="text-3xl sm:text-4xl md:text-5xl font-bold text-black tracking-wider">0</span>
              <span class="mt-1 text-xs sm:text-sm font-medium tracking-wider text-gray-600 uppercase">{unit.toUpperCase()}</span>
            </div>
          ))}
        </div>
      </div>

      <!-- Right: Shop Button -->
      <div class="flex justify-center md:justify-end">
        <a
          href={buttonUrl}
          class="inline-block bg-zinc-900 hover:bg-zinc-700 text-white font-secondary py-3 px-8 rounded-lg text-base md:text-lg transition shadow-lg uppercase tracking-wider"
        >
          {buttonText}
        </a>
      </div>
    </div>
  </div>
</section>

<!-- products -->
<div id="seasonProducts" class="section-padding-x! mt-16 mb-16">
  <Slider products={products.slice(0, 8)} layout="horizontal" client:load/>
</div>

<!-- paragraph -->
<div class="section-padding-x!">
  <p class="text-center lg:text-4xl md:text-2xl sm:text-xl font-tertiary text-zinc-800 font-medium tracking-wider mb-16">
    Trendy tracksuits and sunglasses designed for the fearless fashionista.
  </p>
</div>

<!-- Video hero -->
<div class="section-padding-x! relative w-full aspect-[16/9] md:rounded-lg overflow-hidden flex items-center justify-center bg-black min-h-[300px] sm:min-h-[350px] md:min-h-[400px] lg:min-h-[500px]" data-video-hero>
  <video
    src="https://cdn.shopify.com/videos/c/o/v/ca1684baee104031893a6ca94b5e59d4.mp4"
    class="absolute inset-0 w-full h-full object-cover"
    autoplay
    muted
    loop
    playsinline
    poster="/fallback-video-poster.jpg"
  ></video>
  <!-- Stronger gradient overlay for readability -->
  <div class="absolute inset-0 bg-gradient-to-b from-black/80 via-black/50 to-black/90"></div>
  <div class="relative z-10 flex flex-col items-center justify-center h-full w-full px-4 py-8 text-center">
    <h2 class="text-white text-2xl xs:text-3xl sm:text-4xl md:text-5xl font-bold font-primary uppercase tracking-wider mb-3 drop-shadow-lg">
      Redefine Your Everyday
    </h2>
    <p class="text-white text-base xs:text-lg sm:text-xl md:text-2xl font-secondary font-light tracking-wider text-center mb-6 drop-shadow-lg max-w-2xl">
      Fearless fashion for the modern world.
    </p>
    <a href="/collections/all" class="inline-block bg-zinc-900 hover:bg-zinc-700 text-white font-secondary py-3 px-8 rounded-lg text-base md:text-lg transition shadow-lg uppercase tracking-wider">
      Shop Now
    </a>
  </div>
</div>

<!-- horizontal scrolling text -->
<div class="scrolling-text" style="--move-speed: 20s;">
  <div class="scrolling-text__inner text-2xl xs:text-3xl sm:text-4xl md:text-5xl font-primary font-bold uppercase tracking-widest">
    <span>Fashion that ignites your confidence.&nbsp;&nbsp;&nbsp;</span>
    <span>Fashion that ignites your confidence.&nbsp;&nbsp;&nbsp;</span>
    <span>Fashion that ignites your confidence.&nbsp;&nbsp;&nbsp;</span>
    <span>Fashion that ignites your confidence.&nbsp;&nbsp;&nbsp;</span>
    <span>Fashion that ignites your confidence.&nbsp;&nbsp;&nbsp;</span>
    <span>Fashion that ignites your confidence.&nbsp;&nbsp;&nbsp;</span>
    <span>Fashion that ignites your confidence.&nbsp;&nbsp;&nbsp;</span>
    <span>Fashion that ignites your confidence.&nbsp;&nbsp;&nbsp;</span>
    <span>Fashion that ignites your confidence.&nbsp;&nbsp;&nbsp;</span>
    <span>Fashion that ignites your confidence.&nbsp;&nbsp;&nbsp;</span>
  </div>
</div>

<!-- products -->
<div id="seasonProducts" class="section-padding-x! mt-16 mb-16">
  <Slider products={products.slice(0, 8)} layout="horizontal" client:load />
</div>

<!-- 2 column grid -->
<div class="flex flex-col lg:flex-row">
  <div class="w-full lg:w-1/2"></div>
</div>

<script define:vars={{ endDate }}>
  class CountdownTimer {
    constructor(targetDate) {
      this.targetDate = new Date(targetDate);
      this.elements = {
        days: document.getElementById("countdown-days"),
        hours: document.getElementById("countdown-hours"),
        minutes: document.getElementById("countdown-minutes"),
        seconds: document.getElementById("countdown-seconds"),
      };
      this.timer = null;
      this.init();
    }

    init() {
      // Update immediately
      this.updateDisplay();
      // Then update every second
      this.timer = setInterval(() => this.updateDisplay(), 1000);
    }

    updateDisplay() {
      const now = new Date().getTime();
      const distance = this.targetDate.getTime() - now;

      if (distance < 0) {
        this.handleCountdownEnd();
        return;
      }

      const timeUnits = this.calculateTimeUnits(distance);
      this.renderTimeUnits(timeUnits);
    }

    calculateTimeUnits(distance) {
      return {
        days: Math.floor(distance / (1000 * 60 * 60 * 24)),
        hours: Math.floor(
          (distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)
        ),
        minutes: Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60)),
        seconds: Math.floor((distance % (1000 * 60)) / 1000),
      };
    }

    renderTimeUnits(timeUnits) {
      Object.keys(timeUnits).forEach((unit) => {
        if (this.elements[unit]) {
          this.elements[unit].textContent = timeUnits[unit]
            .toString()
            .padStart(2, "0");
        }
      });
    }

    handleCountdownEnd() {
      if (this.timer) {
        clearInterval(this.timer);
      }

      // Display zeros
      Object.values(this.elements).forEach((element) => {
        if (element) element.textContent = "00";
      });

      // Dispatch custom event for countdown end
      document.dispatchEvent(
        new CustomEvent("countdownEnded", {
          detail: {
            section: document.querySelector("[data-countdown-section]"),
          },
        })
      );
    }

    destroy() {
      if (this.timer) {
        clearInterval(this.timer);
      }
    }
  }

  // Initialize countdown when DOM is ready
  document.addEventListener("DOMContentLoaded", () => {
    new CountdownTimer(endDate);
  });

</script>

<style>
  /* Ensure consistent spacing for countdown numbers */
  #countdown-days,
  #countdown-hours,
  #countdown-minutes,
  #countdown-seconds {
    min-width: 2ch;
    display: inline-block;
  }

  /* Scrolling text styles */
  .scrolling-text {
    overflow: hidden;
    direction: ltr;
    width: 100%;
    background: transparent;
    margin: 2rem 0;
  }
  .scrolling-text__inner {
    visibility: visible;
    white-space: nowrap;
    display: inline-flex;
    margin: 0.15em 0;
    animation: scrolling-text var(--move-speed, 20s) linear infinite;
    animation-play-state: running;
  }
  .scrolling-text__inner--right {
    animation: scrolling-text-right var(--move-speed, 20s) linear infinite;
  }
  .scrolling-text span {
    white-space: nowrap;
    font-size: 1.5rem;
    font-weight: 600;
    color: #111;
    letter-spacing: 0.1em;
    font-family: inherit;
  }
  .scrolling-text:hover .scrolling-text__inner,
  .scrolling-text:focus .scrolling-text__inner {
    animation-play-state: paused;
  }
  @keyframes scrolling-text {
    0% {
      transform: translateX(0);
    }
    100% {
      transform: translateX(-50%);
    }
  }
  @keyframes scrolling-text-right {
    0% {
      transform: translateX(-50%);
    }
    100% {
      transform: translateX(0);
    }
  }
</style>
