---
export interface Props {
  instanceId: string; // Unique identifier for this filter instance
}
const { instanceId } = Astro.props;

// Helper function to create prefixed IDs
const elId = (id: string) => `${instanceId}-${id}`;
---

<div class="p-4 rounded-sm w-full max-w-full relative z-10 border border-zinc-200" data-filter-instance={instanceId}>
  {/* Active Filter Tags */}
  <div id={elId("activeFilterTags")} class="mb-4 space-y-2 hidden" aria-live="polite" aria-atomic="true">
    <div id={elId("availabilityTag")} class="bg-green-700 text-white px-4 py-2 rounded flex items-center justify-between text-sm font-medium hidden transition-all duration-200 ease-in-out">
      <span></span>
      <button
        class="ml-2 text-white hover:text-gray-200 focus:outline-none rounded"
        data-filter-type="availability"  aria-label="Remove availability filter"
      >
        <svg class="w-4 h-4 pointer-events-none" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>
    <div id={elId("priceTag")} class="bg-blue-700 text-white px-4 py-2 rounded flex items-center justify-between text-sm font-medium hidden transition-all duration-200 ease-in-out">
      <span></span>
      <button
        class="ml-2 text-white hover:text-gray-200 focus:outline-none rounded"
        data-filter-type="price" aria-label="Remove price filter"
      >
        <svg class="w-4 h-4 pointer-events-none" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>
  </div>

  {/* Availability Filter */}
  <div class="mb-8">
    <button
      class="flex items-center justify-between text-left mb-4 focus:outline-none w-full"
      id={elId("availabilityToggle")} aria-expanded="true" aria-controls={elId("availabilityOptions")}
    >
      <h3 class="text-sm font-medium tracking-wider uppercase text-gray-900">
        Availability
      </h3>
      <svg class="w-4 h-4 text-gray-500 transform transition-transform" id={elId("availabilityArrow")} fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
      </svg>
    </button>

    <div class="space-y-3" id={elId("availabilityOptions")}>
      <button
        class="flex items-center cursor-pointer text-left hover:bg-gray-100 p-1 rounded w-full focus:outline-none "
        id={elId("inStockButton")} data-availability="true" role="checkbox" aria-checked="false"
      >
        <div class="w-4 h-4 mr-3 flex-shrink-0 flex items-center justify-center border border-gray-300 rounded-sm">
          <div class="w-3 h-3 bg-black hidden" id={elId("inStockCheck")}></div>
        </div>
        <span class="text-gray-900" id={elId("inStockText")}>In stock</span>
      </button>

      <button
        class="flex items-center cursor-pointer text-left hover:bg-gray-100 p-1 rounded w-full focus:outline-none"
        id={elId("outOfStockButton")} data-availability="false" role="checkbox" aria-checked="false"
      >
        <div class="w-4 h-4 mr-3 flex-shrink-0 flex items-center justify-center border border-gray-300 rounded-sm">
          <div class="w-3 h-3 bg-black hidden" id={elId("outOfStockCheck")}></div>
        </div>
        <span class="text-gray-900" id={elId("outOfStockText")}>Out of stock</span>
      </button>
    </div>
  </div>

  {/* Price Filter */}
  <div class="mb-8 w-full">
    <button
      class="flex items-center justify-between text-left mb-4 focus:outline-none w-full"
      id={elId("priceToggle")} aria-expanded="true" aria-controls={elId("priceOptions")}
    >
      <h3 class="text-sm font-medium tracking-wider uppercase text-gray-900">
        Price
      </h3>
      <svg class="w-4 h-4 text-gray-500 transform transition-transform" id={elId("priceArrow")} fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
      </svg>
    </button>

    <div class="space-y-4" id={elId("priceOptions")}>
      <div class="flex justify-between text-sm text-gray-900">
        <span id={elId("minPriceDisplay")}>$0.00</span>
        <span id={elId("maxPriceDisplay")}>$199.00</span>
      </div>
      <div class="relative w-full px-1" id={elId("priceSlider")}>
        <div class="h-2 bg-gray-200 rounded-full">
          <div class="h-2 bg-gray-800 rounded-full relative" id={elId("priceRange")}>
            <div
              class="absolute -top-1.5 -left-2 w-5 h-5 bg-gray-800 rounded-full cursor-pointer border-2 border-white shadow focus:outline-none focus:ring-2 focus:ring-zinc-500 transition-all duration-150"
              id={elId("minHandle")} role="slider" tabindex="0" aria-valuenow="0" aria-valuemin="0" aria-valuemax="198"
              aria-label="Minimum price" aria-valuetext="$0" style="touch-action: none;"
            ></div>
            <div
              class="absolute -top-1.5 -right-2 w-5 h-5 bg-gray-800 rounded-full cursor-pointer border-2 border-white shadow focus:outline-none focus:ring-2 focus:ring-zinc-500 transition-all duration-150"
              id={elId("maxHandle")} role="slider" tabindex="0" aria-valuenow="199" aria-valuemin="1" aria-valuemax="199"
              aria-label="Maximum price" aria-valuetext="$199" style="touch-action: none;"
            ></div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  import { filters as filterStore } from "$/stores/filters";

  interface FilterState {
    availability: string | null;
    minPrice: number | null;
    maxPrice: number | null;
  }

  // Each instance of FilterComponent will be tied to a specific root element
  // identified by `data-filter-instance` which matches the instanceId prop.
  class FilterComponent {
    private rootElement: HTMLElement;
    private instanceId: string;

    private minPriceConfig: number;
    private maxPriceConfig: number;
    private currentMinPrice: number;
    private currentMaxPrice: number;
    private isDragging: boolean;
    private activeHandle: 'min' | 'max' | null;
    private activeFilters: FilterState;

    // DOM Elements
    private availabilityToggle: HTMLElement | null = null;
    private availabilityOptions: HTMLElement | null = null;
    private availabilityArrow: HTMLElement | null = null;
    private inStockButton: HTMLElement | null = null;
    private outOfStockButton: HTMLElement | null = null;
    private inStockCheck: HTMLElement | null = null;
    private outOfStockCheck: HTMLElement | null = null;
    private inStockText: HTMLElement | null = null;
    private outOfStockText: HTMLElement | null = null;

    private priceToggle: HTMLElement | null = null;
    private priceOptions: HTMLElement | null = null;
    private priceArrow: HTMLElement | null = null;
    private priceSlider: HTMLElement | null = null;
    private minHandle: HTMLElement | null = null;
    private maxHandle: HTMLElement | null = null;
    private priceRange: HTMLElement | null = null;
    private minPriceDisplay: HTMLElement | null = null;
    private maxPriceDisplay: HTMLElement | null = null;

    private activeFilterTagsContainer: HTMLElement | null = null;
    private availabilityTag: HTMLElement | null = null;
    private priceTag: HTMLElement | null = null;

    constructor(element: HTMLElement) {
      this.rootElement = element;
      this.instanceId = element.dataset.filterInstance || ''; // Get instanceId from data attribute

      if (!this.instanceId) {
        console.error('FilterComponent instance is missing an instanceId.');
        // Potentially stop initialization or throw an error
      }

      this.minPriceConfig = 0;
      this.maxPriceConfig = 199;
      this.currentMinPrice = this.minPriceConfig;
      this.currentMaxPrice = this.maxPriceConfig;
      this.isDragging = false;
      this.activeHandle = null;
      this.activeFilters = {
        availability: null,
        minPrice: null,
        maxPrice: null
      };

      this.cacheDOMElements();
      if (this.instanceId) { // Only init if instanceId is valid
        this.init();
        this.loadFiltersFromURL();
      }
    }

    // Helper to get element by ID within this instance
    private getElementById(id: string): HTMLElement | null {
      return this.rootElement.querySelector(`#${this.instanceId}-${id}`);
    }

    private cacheDOMElements(): void {
      this.availabilityToggle = this.getElementById('availabilityToggle');
      this.availabilityOptions = this.getElementById('availabilityOptions');
      this.availabilityArrow = this.getElementById('availabilityArrow');
      this.inStockButton = this.getElementById('inStockButton');
      this.outOfStockButton = this.getElementById('outOfStockButton');
      this.inStockCheck = this.getElementById('inStockCheck');
      this.outOfStockCheck = this.getElementById('outOfStockCheck');
      this.inStockText = this.getElementById('inStockText');
      this.outOfStockText = this.getElementById('outOfStockText');

      this.priceToggle = this.getElementById('priceToggle');
      this.priceOptions = this.getElementById('priceOptions');
      this.priceArrow = this.getElementById('priceArrow');
      this.priceSlider = this.getElementById('priceSlider');
      this.minHandle = this.getElementById('minHandle');
      this.maxHandle = this.getElementById('maxHandle');
      this.priceRange = this.getElementById('priceRange');
      this.minPriceDisplay = this.getElementById('minPriceDisplay');
      this.maxPriceDisplay = this.getElementById('maxPriceDisplay');

      this.activeFilterTagsContainer = this.getElementById('activeFilterTags');
      this.availabilityTag = this.getElementById('availabilityTag');
      this.priceTag = this.getElementById('priceTag');
    }

    private init(): void {
      this.bindEvents();
      this.updatePriceDisplay();
      this.updateSliderPosition();
      this.availabilityArrow?.classList.remove('rotate-180');
      this.priceArrow?.classList.remove('rotate-180');

      // Set initial ARIA states for accordions
      this.availabilityToggle?.setAttribute('aria-expanded', 'true');
      this.priceToggle?.setAttribute('aria-expanded', 'true');
      // If you decide to start them closed by default, change HTML and these ARIA states.
    }


    private bindEvents(): void {
      this.availabilityToggle?.addEventListener('click', () => this.toggleSection('availability'));
      this.priceToggle?.addEventListener('click', () => this.toggleSection('price'));

      this.inStockButton?.addEventListener('click', () => this.handleAvailabilityFilter('true'));
      this.outOfStockButton?.addEventListener('click', () => this.handleAvailabilityFilter('false'));

      this.minHandle?.addEventListener('mousedown', (e: MouseEvent) => this.startDrag(e, 'min'));
      this.maxHandle?.addEventListener('mousedown', (e: MouseEvent) => this.startDrag(e, 'max'));
      this.minHandle?.addEventListener('touchstart', (e: TouchEvent) => this.startDrag(e, 'min'), { passive: false });
      this.maxHandle?.addEventListener('touchstart', (e: TouchEvent) => this.startDrag(e, 'max'), { passive: false });

      this.minHandle?.addEventListener('keydown', (e: KeyboardEvent) => this.handleSliderKey(e, 'min'));
      this.maxHandle?.addEventListener('keydown', (e: KeyboardEvent) => this.handleSliderKey(e, 'max'));

      document.addEventListener('mousemove', this.drag);
      document.addEventListener('mouseup', this.endDrag);
      document.addEventListener('touchmove', this.drag, { passive: false });
      document.addEventListener('touchend', this.endDrag);

      this.activeFilterTagsContainer?.addEventListener('click', (e: MouseEvent) => {
        const target = e.target as HTMLElement;
        // Changed to data-filter-type to avoid clash with Sorter's data-filter
        const filterButton = target.closest('button[data-filter-type]');
        if (filterButton) {
          const filterType = filterButton.getAttribute('data-filter-type');
          if (filterType) {
            this.removeFilter(filterType);
          }
        }
      });
    }
    // Need to bind `this` for document event listeners or use arrow functions
    private drag = (e: MouseEvent | TouchEvent): void => {
      if (!this.isDragging || !this.activeHandle || !this.priceSlider) return;
      if (e.type === 'touchmove') e.preventDefault();

      const rect = this.priceSlider.getBoundingClientRect();
      let clientX: number;
      if (e instanceof MouseEvent) clientX = e.clientX;
      else clientX = e.touches[0].clientX;

      const percentage = Math.max(0, Math.min(1, (clientX - rect.left) / rect.width));
      const value = Math.round(this.minPriceConfig + (this.maxPriceConfig - this.minPriceConfig) * percentage);

      if (this.activeHandle === 'min') {
        this.currentMinPrice = Math.max(this.minPriceConfig, Math.min(value, this.currentMaxPrice - 1));
      } else {
        this.currentMaxPrice = Math.min(this.maxPriceConfig, Math.max(value, this.currentMinPrice + 1));
      }
      this.updateSliderPosition();
      this.updatePriceDisplay();
    }

    private endDrag = (): void => { // Arrow function for `this` binding
      if (!this.isDragging) return;
      this.isDragging = false;
      this.activeHandle = null;
      document.body.style.cursor = '';
      document.body.style.userSelect = '';
      document.body.style.webkitUserSelect = '';

      this.activeFilters.minPrice = this.currentMinPrice > this.minPriceConfig ? this.currentMinPrice : null;
      this.activeFilters.maxPrice = this.currentMaxPrice < this.maxPriceConfig ? this.currentMaxPrice : null;
      if (this.activeFilters.minPrice !== null && this.activeFilters.maxPrice !== null && this.activeFilters.minPrice > this.activeFilters.maxPrice) {
        this.activeFilters.maxPrice = this.activeFilters.minPrice;
      }
      this.updateFilterTags();
      this.updateURL();
      this.updateStore();
    }


    private toggleSection(section: 'availability' | 'price'): void {
      const options = section === 'availability' ? this.availabilityOptions : this.priceOptions;
      const arrow = section === 'availability' ? this.availabilityArrow : this.priceArrow;
      const toggleButton = section === 'availability' ? this.availabilityToggle : this.priceToggle;

      const isHidden = options?.classList.toggle('hidden');
      arrow?.classList.toggle('rotate-180', !isHidden);
      toggleButton?.setAttribute('aria-expanded', String(!isHidden));
    }

    private handleAvailabilityFilter(value: string): void {
      this.inStockCheck?.classList.add('hidden');
      this.outOfStockCheck?.classList.add('hidden');
      this.inStockText?.classList.remove('font-bold');
      this.outOfStockText?.classList.remove('font-bold');
      this.inStockButton?.setAttribute('aria-checked', 'false');
      this.outOfStockButton?.setAttribute('aria-checked', 'false');

      if (this.activeFilters.availability === value) {
        this.activeFilters.availability = null;
      } else {
        this.activeFilters.availability = value;
        if (value === 'true') {
          this.inStockCheck?.classList.remove('hidden');
          this.inStockText?.classList.add('font-bold');
          this.inStockButton?.setAttribute('aria-checked', 'true');
        } else {
          this.outOfStockCheck?.classList.remove('hidden');
          this.outOfStockText?.classList.add('font-bold');
          this.outOfStockButton?.setAttribute('aria-checked', 'true');
        }
      }
      this.updateFilterTags();
      this.updateURL();
      this.updateStore();
    }

    private startDrag(e: MouseEvent | TouchEvent, handle: 'min' | 'max'): void {
      if (e.type === "touchstart"){
         // For touchstart, preventDefault only if not a button/interactive element itself to allow focus.
         // Or, ensure interactive elements inside handles are not present or handle events separately.
         // For simplicity here, if the target is the handle itself, preventDefault.
         if ((e.target === this.minHandle || e.target === this.maxHandle)) {
            e.preventDefault();
         }
      } else if (e.type === "mousedown"){
         e.preventDefault(); // Standard for mouse to prevent text selection, etc.
      }


      this.isDragging = true;
      this.activeHandle = handle;
      document.body.style.cursor = 'grabbing';
      document.body.style.userSelect = 'none';
      document.body.style.webkitUserSelect = 'none';

      const activeDOMHandle = handle === 'min' ? this.minHandle : this.maxHandle;
      activeDOMHandle?.focus();
    }

    private updateSliderPosition(): void {
      if (!this.priceRange || !this.minHandle || !this.maxHandle) return;
      const range = this.maxPriceConfig - this.minPriceConfig;
      if (range <= 0) { // Handle edge case where minPriceConfig might equal maxPriceConfig
        this.priceRange.style.left = `0%`;
        this.priceRange.style.width = (this.currentMaxPrice >= this.currentMinPrice) ? `0%` : `100%`; // Or specific logic
        // Handles should reflect actual values even if range is 0
        const minPosPercent = this.minPriceConfig === this.maxPriceConfig ? 0 : (this.currentMinPrice - this.minPriceConfig) / (this.maxPriceConfig - this.minPriceConfig + (this.maxPriceConfig === this.minPriceConfig ? 1 : 0)) * 100;
        const maxPosPercent = this.minPriceConfig === this.maxPriceConfig ? 100 : (this.currentMaxPrice - this.minPriceConfig) / (this.maxPriceConfig - this.minPriceConfig + (this.maxPriceConfig === this.minPriceConfig ? 1 : 0)) * 100;
        //This is more complex; for a 0-range slider, positions are fixed.
        //The main logic for minPercent/maxPercent will handle typical cases.
        //Let's simplify for now assuming range > 0 as per most sliders.
        //If range can be 0, minPercent and maxPercent need careful definition.
        // For simplicity, if range is 0, we assume min and max are at start/end respectively.
        this.priceRange.style.left = range > 0 ? `${((this.currentMinPrice - this.minPriceConfig) / range) * 100}%` : '0%';
        this.priceRange.style.width = range > 0 ? `${((this.currentMaxPrice - this.currentMinPrice) / range) * 100}%` : '0%';

      } else {
        const minPercent = ((this.currentMinPrice - this.minPriceConfig) / range) * 100;
        const maxPercent = ((this.currentMaxPrice - this.minPriceConfig) / range) * 100;
        this.priceRange.style.left = `${minPercent}%`;
        this.priceRange.style.width = `${maxPercent - minPercent}%`;
      }


      this.minHandle.setAttribute('aria-valuenow', String(this.currentMinPrice));
      this.minHandle.setAttribute('aria-valuemin', String(this.minPriceConfig));
      this.minHandle.setAttribute('aria-valuemax', String(this.currentMaxPrice - 1));
      this.minHandle.setAttribute('aria-valuetext', `$${this.currentMinPrice.toFixed(2)}`);
      this.maxHandle.setAttribute('aria-valuenow', String(this.currentMaxPrice));
      this.maxHandle.setAttribute('aria-valuemin', String(this.currentMinPrice + 1));
      this.maxHandle.setAttribute('aria-valuemax', String(this.maxPriceConfig));
      this.maxHandle.setAttribute('aria-valuetext', `$${this.currentMaxPrice.toFixed(2)}`);
    }

    private updatePriceDisplay(): void {
      if (this.minPriceDisplay) this.minPriceDisplay.textContent = `$${this.currentMinPrice.toFixed(2)}`;
      if (this.maxPriceDisplay) this.maxPriceDisplay.textContent = `$${this.currentMaxPrice.toFixed(2)}`;
    }

    private updateFilterTags(): void {
      if (!this.activeFilterTagsContainer || !this.availabilityTag || !this.priceTag) return;
      let hasActiveFilters = false;
      const availabilitySpan = this.availabilityTag.querySelector('span');
      if (this.activeFilters.availability !== null && availabilitySpan) {
        availabilitySpan.textContent = this.activeFilters.availability === 'true' ? 'IN STOCK' : 'OUT OF STOCK';
        this.availabilityTag.classList.remove('hidden');
        hasActiveFilters = true;
      } else {
        this.availabilityTag.classList.add('hidden');
      }
      const priceSpan = this.priceTag.querySelector('span');
      if ((this.activeFilters.minPrice !== null || this.activeFilters.maxPrice !== null) && priceSpan) {
        const minText = this.activeFilters.minPrice !== null ? `$${this.activeFilters.minPrice}` : `$${this.minPriceConfig}`;
        const maxText = this.activeFilters.maxPrice !== null ? `$${this.activeFilters.maxPrice}` : `$${this.maxPriceConfig}`;
        priceSpan.textContent = `${minText} - ${maxText}`;
        this.priceTag.classList.remove('hidden');
        hasActiveFilters = true;
      } else {
        this.priceTag.classList.add('hidden');
      }
      this.activeFilterTagsContainer.classList.toggle('hidden', !hasActiveFilters);
    }

    private removeFilter(filterType: string): void {
      if (filterType === 'availability') {
        this.activeFilters.availability = null;
        this.inStockCheck?.classList.add('hidden');
        this.outOfStockCheck?.classList.add('hidden');
        this.inStockText?.classList.remove('font-bold');
        this.outOfStockText?.classList.remove('font-bold');
        this.inStockButton?.setAttribute('aria-checked', 'false');
        this.outOfStockButton?.setAttribute('aria-checked', 'false');
      } else if (filterType === 'price') {
        this.activeFilters.minPrice = null;
        this.activeFilters.maxPrice = null;
        this.currentMinPrice = this.minPriceConfig;
        this.currentMaxPrice = this.maxPriceConfig;
        this.updateSliderPosition();
        this.updatePriceDisplay();
      }
      this.updateFilterTags();
      this.updateURL();
      this.updateStore();
    }

    private updateURL(): void {
      const url = new URL(window.location.href);
      url.searchParams.delete('availability');
      url.searchParams.delete('minPrice');
      url.searchParams.delete('maxPrice');
      if (this.activeFilters.availability !== null) {
        url.searchParams.set('availability', this.activeFilters.availability);
      }
      if (this.activeFilters.minPrice !== null) {
        url.searchParams.set('minPrice', String(this.activeFilters.minPrice));
      }
      if (this.activeFilters.maxPrice !== null) {
        url.searchParams.set('maxPrice', String(this.activeFilters.maxPrice));
      }
      window.history.replaceState({ instanceId: this.instanceId }, '', url.toString());
    }

    private updateStore(): void {
      const filtersToSet: Record<string, string | number> = {};
      if (this.activeFilters.availability !== null) filtersToSet.availability = this.activeFilters.availability;
      if (this.activeFilters.minPrice !== null) filtersToSet.minPrice = this.activeFilters.minPrice;
      if (this.activeFilters.maxPrice !== null) filtersToSet.maxPrice = this.activeFilters.maxPrice;
      filterStore.set(filtersToSet);
    }

    private loadFiltersFromURL(): void {
      const urlParams = new URLSearchParams(window.location.search);
      const availability = urlParams.get('availability');
      if (availability === 'true' || availability === 'false') {
        this.handleAvailabilityFilter(availability); // This will also call updateStore and updateURL
      }

      const minPriceStr = urlParams.get('minPrice');
      const maxPriceStr = urlParams.get('maxPrice');
      let priceChanged = false;

      if (minPriceStr && !isNaN(Number(minPriceStr))) {
        const loadedMin = Number(minPriceStr);
        this.currentMinPrice = Math.max(this.minPriceConfig, Math.min(loadedMin, this.maxPriceConfig));
        this.activeFilters.minPrice = this.currentMinPrice > this.minPriceConfig ? this.currentMinPrice : null;
        priceChanged = true;
      }
      if (maxPriceStr && !isNaN(Number(maxPriceStr))) {
         const loadedMax = Number(maxPriceStr);
        this.currentMaxPrice = Math.min(this.maxPriceConfig, Math.max(loadedMax, this.minPriceConfig));
         this.activeFilters.maxPrice = this.currentMaxPrice < this.maxPriceConfig ? this.currentMaxPrice : null;
        priceChanged = true;
      }
      
      if (this.currentMinPrice > this.currentMaxPrice) {
          this.currentMinPrice = this.currentMaxPrice;
           if(this.activeFilters.minPrice && this.activeFilters.maxPrice && this.activeFilters.minPrice > this.activeFilters.maxPrice) {
                this.activeFilters.minPrice = this.activeFilters.maxPrice;
           }
      }


      if (priceChanged) {
        this.updateSliderPosition();
        this.updatePriceDisplay();
      }
      // Update tags and store based on potentially modified activeFilters
      this.updateFilterTags();
      this.updateStore(); // Ensure store reflects loaded state accurately
      // No need to call updateURL here as we are loading from it, unless we corrected values.
      // If values were corrected (e.g. min > max), an updateURL call might be desired.
      // For now, assume URL params are trusted if present and valid.
    }

    private handleSliderKey(e: KeyboardEvent, handle: 'min' | 'max'): void {
      let step = 1;
      if (e.shiftKey) step = 10;
      let priceChanged = false;
      switch (e.key) {
        case 'ArrowLeft': case 'ArrowDown':
          if (handle === 'min') this.currentMinPrice = Math.max(this.minPriceConfig, Math.min(this.currentMinPrice - step, this.currentMaxPrice - 1));
          else this.currentMaxPrice = Math.max(this.currentMinPrice + 1, this.currentMaxPrice - step);
          priceChanged = true; e.preventDefault(); break;
        case 'ArrowRight': case 'ArrowUp':
          if (handle === 'min') this.currentMinPrice = Math.min(this.currentMaxPrice - 1, this.currentMinPrice + step);
          else this.currentMaxPrice = Math.min(this.maxPriceConfig, this.currentMaxPrice + step);
          priceChanged = true; e.preventDefault(); break;
        case 'Home':
          if (handle === 'min') this.currentMinPrice = this.minPriceConfig;
          else this.currentMaxPrice = Math.max(this.currentMinPrice + 1, this.minPriceConfig); // Reset max based on current min
          priceChanged = true; e.preventDefault(); break;
        case 'End':
          if (handle === 'min') this.currentMinPrice = Math.min(this.currentMaxPrice - 1, this.maxPriceConfig); // Reset min based on current max
          else this.currentMaxPrice = this.maxPriceConfig;
          priceChanged = true; e.preventDefault(); break;
        case 'Enter': case ' ':
          this.activeFilters.minPrice = this.currentMinPrice > this.minPriceConfig ? this.currentMinPrice : null;
          this.activeFilters.maxPrice = this.currentMaxPrice < this.maxPriceConfig ? this.currentMaxPrice : null;
          if (this.activeFilters.minPrice !== null && this.activeFilters.maxPrice !== null && this.activeFilters.minPrice > this.activeFilters.maxPrice) {
            this.activeFilters.maxPrice = this.activeFilters.minPrice;
          }
          this.updateFilterTags(); this.updateURL(); this.updateStore();
          e.preventDefault(); return;
      }
      if (priceChanged) { this.updateSliderPosition(); this.updatePriceDisplay(); }
    }

    // Cleanup for document event listeners if the component instance could be removed from the DOM
    public destroy(): void {
        document.removeEventListener('mousemove', this.drag);
        document.removeEventListener('mouseup', this.endDrag);
        document.removeEventListener('touchmove', this.drag);
        document.removeEventListener('touchend', this.endDrag);
        // Remove other listeners if they were bound to elements outside this.rootElement
        // or if the script tag itself might be removed causing memory leaks.
    }
  }

  // Initialize all FilterComponent instances on the page
  if (typeof window !== 'undefined') {
    document.addEventListener('DOMContentLoaded', () => {
      const filterElements = document.querySelectorAll<HTMLElement>('[data-filter-instance]');
      filterElements.forEach(el => {
        new FilterComponent(el);
      });
    });
  }
</script>

<style>
  #priceSlider { /* This ID is now prefixed, so style needs to target attribute or class */
    min-width: 120px;
    max-width: 100%;
    box-sizing: border-box;
  }
  /* Target by data-attribute if IDs are dynamic, or use classes for styling */
  [data-filter-instance] #priceRange { /* Example, adjust if needed */
    box-sizing: border-box;
  }
  [data-filter-instance] #minHandle:focus,
  [data-filter-instance] #maxHandle:focus {
    outline: none;
    box-shadow: 0 0 0 3px rgba(16, 185, 129, 0.4);
    border-color: #10b981;
    z-index: 20;
  }
  body.dragging, body.dragging * {
    cursor: grabbing !important;
  }
  [data-filter-instance] #activeFilterTags > div {
    transition: opacity 0.2s ease-in-out, transform 0.2s ease-in-out;
    opacity: 1;
    transform: translateY(0);
  }
  [data-filter-instance] #activeFilterTags > div.hidden {
    opacity: 0;
    transform: translateY(-10px);
    pointer-events: none;
  }
  [data-filter-instance] #availabilityArrow,
  [data-filter-instance] #priceArrow {
    transition: transform 0.2s ease-in-out;
  }
  .rotate-180 {
    transform: rotate(180deg);
  }
</style>
