---
import type { z } from "zod";
import type { ProductResult } from "../utils/schemas";

import ShopifyImage from "./ShopifyImage.svelte";
import Money from "./Money.svelte";

export interface Props {
  product: z.infer<typeof ProductResult>;
  size?: 'medium' | 'large'
}
const { product, size = 'medium' } = Astro.props as Props;

// Helper functions
const isOnSale = product?.variants.nodes[0].compareAtPrice && 
  parseFloat(product.variants.nodes[0].compareAtPrice.amount) > parseFloat(product.variants.nodes[0].price.amount);

const isSoldOut = !product?.variants.nodes.some(variant => variant.availableForSale);

// Get unique colors from variants (assuming color is in the option values)
const getColorVariants = () => {
  if (!product?.variants.nodes) return [];
  
  const colors = new Map();
  product.variants.nodes.forEach(variant => {
    variant.selectedOptions?.forEach(option => {
      if (option.name.toLowerCase() === 'color') {
        colors.set(option.value, variant.id);
      }
    });
  });
  
  return Array.from(colors.entries());
};

const colorVariants = getColorVariants();

// Color mapping for swatches
const getColorClass = (colorName: string) => {
  const colorMap: { [key: string]: string } = {
    'green': 'bg-green-500',
    'yellow': 'bg-yellow-400',
    'red': 'bg-red-500',
    'blue': 'bg-blue-500',
    'black': 'bg-black',
    'white': 'bg-white border-gray-300',
    'gray': 'bg-gray-400',
    'grey': 'bg-gray-400',
    'beige': 'bg-beige',
    'brown': 'bg-brown',
    'orange': 'bg-orange',
    'pink': 'bg-pink',
    'purple': 'bg-purple',
  };
  
  const lowerColor = colorName.toLowerCase();
  return colorMap[lowerColor] || 'bg-gray-300';
};

const sizeClasses = {
  medium: 'w-full h-auto aspect-[3/4] max-h-[340px] sm:max-h-[360px] md:max-h-[380px] lg:max-h-[400px]',
  large: 'w-full h-auto aspect-[3/4] max-h-[340px] sm:max-h-[360px] md:max-h-[380px] lg:max-h-[400px]'
}

const cardClasses = `relative ${sizeClasses[size]}`

// Get the second image if available
const secondImage = product?.images.nodes[1] || product?.featuredImage;
---

<a
  href={`/products/${product?.handle}`}
  class="group overflow-hidden block"
>
<!-- card container -->
  <div class={cardClasses}>
    <!-- image container -->
    <div class="w-full h-full flex items-center justify-center overflow-hidden relative">
      <!-- hover image (background) -->
      <ShopifyImage
        classList="w-full h-full object-cover object-center absolute inset-0"
        loading="eager"
        image={secondImage}
        sizes={`
          (min-width: 1540px) 348px,
          (min-width: 1280px) 284px,
          (min-width: 1040px) 309px,
          (min-width: 780px) 348px,
          (min-width: 640px) 284px,
          calc(100vw - 48px)
        `}
      />
      <!-- main image (foreground) -->
      <ShopifyImage
        classList="w-full h-full object-cover object-center absolute inset-0 transition-opacity duration-300 group-hover:opacity-0"
        loading="eager"
        image={product?.featuredImage}
        sizes={`
          (min-width: 1540px) 348px,
          (min-width: 1280px) 284px,
          (min-width: 1040px) 309px,
          (min-width: 780px) 348px,
          (min-width: 640px) 284px,
          calc(100vw - 48px)
        `}
      />
    </div>
    
    <!-- Sale/Sold Out Badge -->
    {isOnSale && !isSoldOut && (
      <div class="absolute top-2 left-2 bg-black text-white px-2 py-1 text-xs font-medium">
        Sale
      </div>
    )}
    
    {isSoldOut && (
      <div class="absolute top-2 left-2 bg-gray-500 text-white px-2 py-1 text-xs font-medium">
        Sold Out
      </div>
    )}
  </div>
  
  <div class="flex flex-col items-center justify-between py-2 text-zinc-700 text-center">
    <!-- Price Section -->
    <div class="font-primary mb-1 text-lg font-semibold text-black">
      {isOnSale ? (
        <div class="flex items-center gap-2 justify-center">
          <span class="line-through text-gray-500 text-sm">
            <Money price={product?.variants.nodes[0].compareAtPrice} />
          </span>
          <span class="text-black">
            <Money price={product?.variants.nodes[0].price} />
          </span>
        </div>
      ) : (
        <Money price={product?.variants.nodes[0].price} />
      )}
    </div>
    <h3 class="font-primary font-bold text-base mb-0.5 break-words w-full">
      {product?.title}
    </h3>
    <!-- Color Swatches -->
    {colorVariants.length > 1 && (
      <div class="flex gap-1 justify-center mt-1">
        {colorVariants.map(([color, variantId]) => (
          <a 
            href={`/products/${product?.handle}?variant=${variantId}`}
            class={`w-4 h-4 rounded-full border ${getColorClass(color)} hover:ring-2 hover:ring-gray-300 transition-all`}
            title={color}
            data-variant-id={variantId}
          />
        ))}
      </div>
    )}
  </div>
</a>
