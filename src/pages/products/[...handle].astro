---
import { getProductByHandle } from "./../../utils/shopify";
import { setCache } from "../../utils/cache";

import BaseLayout from "../../layouts/BaseLayout.astro";
import NotFoundLayout from "../../layouts/NotFoundLayout.astro";
import AddToCartForm from "../../components/AddToCartForm.svelte";
import ProductImageGallery from "../../components/ProductImageGallery.astro";
import ProductBreadcrumb from "../../components/ProductBreadcrumb.astro";
import ProductInformations from "../../components/ProductInformations.astro";
import ProductRecommendations from "../../components/ProductRecommendations.astro";
import ProductReviews from "../../components/ProductReviews.astro";
import ProductAccordions from "../../components/ProductAccordions.astro";

const { handle } = Astro.params;
const headers = Astro.request.headers;
const ip = headers.get("x-vercel-forwarded-for") || Astro.clientAddress;
const product = await getProductByHandle({ handle: handle || "", buyerIP: ip });

if (!product) {
  Astro.response.status = 404;
}

// Enhanced variant selection logic
const url = new URL(Astro.request.url);
const variantId = url.searchParams.get('variant');

// Helper to find variant by ID or get first available variant
const getSelectedVariant = () => {
  if (!product?.variants.nodes.length) return null;
  
  // If variant ID is provided, try to find it
  if (variantId) {
    const foundVariant = product.variants.nodes.find(v => v.id === variantId);
    if (foundVariant) return foundVariant;
  }
  
  // Fall back to first available variant, or first variant if none are available
  const availableVariant = product.variants.nodes.find(v => 
    v.availableForSale && v.quantityAvailable > 0
  );
  
  return availableVariant || product.variants.nodes[0];
};

const selectedVariant = getSelectedVariant();

// Debug logging for development
if (import.meta.env.DEV) {
  console.log('Product options:', product?.options);
  console.log('Selected variant:', selectedVariant);
  console.log('Available variants:', product?.variants.nodes.filter(v => 
    v.availableForSale && v.quantityAvailable > 0
  ).length);
}

setCache.short(Astro);
---

{
  !product ? (
    <NotFoundLayout title="Product not found" message="Product not found" />
  ) : (
    <BaseLayout title={product.title} navigation={{variant: "relative", enableScrollAnimation: true}}>
      {/* <div class="container pt-6">
        <ProductBreadcrumb title={product.title} />
      </div> */}

      <section class="section-padding-x lg:mt-10">
        <div class="pb-16 lg:grid lg:grid-cols-12 lg:gap-20">
          <div class="lg:col-span-7">
            <ProductImageGallery images={product.images} />
          </div>

          <div class="mt-8 lg:col-span-5 lg:mt-0">
            <ProductInformations
              title={product.title}
              price={selectedVariant?.price}
              product={product}
              selectedVariant={selectedVariant}
            />

            <div class="mx-4 lg:mx-0">
              <AddToCartForm
                client:load
                variantId={selectedVariant?.id}
                variantQuantityAvailable={selectedVariant?.quantityAvailable}
                variantAvailableForSale={selectedVariant?.availableForSale}
              />
            </div>

            <div class="mt-8">
              <ProductAccordions description={product.description} />
            </div>
          </div>
        </div>
      </section>

      {/* <section class="container">
        <ProductReviews />
      </section> */}

      <section class="container">
        <ProductRecommendations productId={product.id} buyerIP={ip} />
      </section>
    </BaseLayout>
  )
}